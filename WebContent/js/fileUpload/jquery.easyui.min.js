/**
 * jQuery EasyUI 1.2.6
 *
 * Licensed under the GPL terms
 * To use it on other terms please contact us
 *
 * Copyright(c) 2009-2012 stworthy [ stworthy@gmail.com ]
 *
 */

//------------------------draggable
(function($) {
    var _1 = false;
    function _2(e) {
        var _3 = $.data(e.data.target, "draggable").options;
        var _4 = e.data;
        var _5 = _4.startLeft + e.pageX - _4.startX;
        var _6 = _4.startTop + e.pageY - _4.startY;
        if (_3.deltaX != null && _3.deltaX != undefined) {
            _5 = e.pageX + _3.deltaX;
        }
        if (_3.deltaY != null && _3.deltaY != undefined) {
            _6 = e.pageY + _3.deltaY;
        }
        if (e.data.parent != document.body) {
            _5 += $(e.data.parent).scrollLeft();
            _6 += $(e.data.parent).scrollTop();
        }
        if (_3.axis == "h") {
            _4.left = _5;
        } else {
            if (_3.axis == "v") {
                _4.top = _6;
            } else {
                _4.left = _5;
                _4.top = _6;
            }
        }
    };
    function _7(e) {
        var _8 = $.data(e.data.target, "draggable").options;
        var _9 = $.data(e.data.target, "draggable").proxy;
        if (_9) {
            _9.css("cursor", _8.cursor);
        } else {
            _9 = $(e.data.target);
            $.data(e.data.target, "draggable").handle.css("cursor", _8.cursor);
        }
        _9.css({
            left : e.data.left,
            top : e.data.top
        });
    };
    function _a(e) {
        _1 = true;
        var _b = $.data(e.data.target, "draggable").options;
        var _c = $(".droppable").filter(function() {
            return e.data.target != this;
        }).filter(function() {
            var _d = $.data(this, "droppable").options.accept;
            if (_d) {
                return $(_d).filter(function() {
                    return this == e.data.target;
                }).length > 0;
            } else {
                return true;
            }
        });
        $.data(e.data.target, "draggable").droppables = _c;
        var _e = $.data(e.data.target, "draggable").proxy;
        if (!_e) {
            if (_b.proxy) {
                if (_b.proxy == "clone") {
                    _e = $(e.data.target).clone().insertAfter(e.data.target);
                } else {
                    _e = _b.proxy.call(e.data.target, e.data.target);
                }
                $.data(e.data.target, "draggable").proxy = _e;
            } else {
                _e = $(e.data.target);
            }
        }
        _e.css("position", "absolute");
        _2(e);
        _7(e);
        _b.onStartDrag.call(e.data.target, e);
        return false;
    };
    function _f(e) {
        _2(e);
        if ($.data(e.data.target, "draggable").options.onDrag.call(e.data.target, e) != false) {
            _7(e);
        }
        var _10 = e.data.target;
        $.data(e.data.target, "draggable").droppables.each(function() {
            var _11 = $(this);
            var p2 = $(this).offset();
            if (e.pageX > p2.left && e.pageX < p2.left + _11.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _11.outerHeight()) {
                if (!this.entered) {
                    $(this).trigger("_dragenter", [_10]);
                    this.entered = true;
                }
                $(this).trigger("_dragover", [_10]);
            } else {
                if (this.entered) {
                    $(this).trigger("_dragleave", [_10]);
                    this.entered = false;
                }
            }
        });
        return false;
    };
    function _12(e) {
        _1 = false;
        _2(e);
        var _13 = $.data(e.data.target, "draggable").proxy;
        var _14 = $.data(e.data.target, "draggable").options;
        if (_14.revert) {
            if (_15() == true) {
                _16();
                $(e.data.target).css({
                    position : e.data.startPosition,
                    left : e.data.startLeft,
                    top : e.data.startTop
                });
            } else {
                if (_13) {
                    _13.animate({
                        left : e.data.startLeft,
                        top : e.data.startTop
                    }, function() {
                        _16();
                    });
                } else {
                    $(e.data.target).animate({
                        left : e.data.startLeft,
                        top : e.data.startTop
                    }, function() {
                        $(e.data.target).css("position", e.data.startPosition);
                    });
                }
            }
        } else {
            $(e.data.target).css({
                position : "absolute",
                left : e.data.left,
                top : e.data.top
            });
            _16();
            _15();
        }
        _14.onStopDrag.call(e.data.target, e);
        $(document).unbind(".draggable");
        setTimeout(function() {
            $("body").css("cursor", "auto");
        }, 100);
        function _16() {
            if (_13) {
                _13.remove();
            }
            $.data(e.data.target, "draggable").proxy = null;
        };
        function _15() {
            var _17 = false;
            $.data(e.data.target, "draggable").droppables.each(function() {
                var _18 = $(this);
                var p2 = $(this).offset();
                if (e.pageX > p2.left && e.pageX < p2.left + _18.outerWidth() && e.pageY > p2.top && e.pageY < p2.top + _18.outerHeight()) {
                    if (_14.revert) {
                        $(e.data.target).css({
                            position : e.data.startPosition,
                            left : e.data.startLeft,
                            top : e.data.startTop
                        });
                    }
                    $(this).trigger("_drop", [e.data.target]);
                    _17 = true;
                    this.entered = false;
                }
            });
            return _17;
        };
        return false;
    };
    $.fn.draggable = function(_19, _1a) {
        if ( typeof _19 == "string") {
            return $.fn.draggable.methods[_19](this, _1a);
        }
        return this.each(function() {
            var _1b;
            var _1c = $.data(this, "draggable");
            if (_1c) {
                _1c.handle.unbind(".draggable");
                _1b = $.extend(_1c.options, _19);
            } else {
                _1b = $.extend({}, $.fn.draggable.defaults, _19 || {});
            }
            if (_1b.disabled == true) {
                $(this).css("cursor", "default");
                return;
            }
            var _1d = null;
            if ( typeof _1b.handle == "undefined" || _1b.handle == null) {
                _1d = $(this);
            } else {
                _1d = ( typeof _1b.handle == "string" ? $(_1b.handle, this) : _1b.handle);
            }
            $.data(this, "draggable", {
                options : _1b,
                handle : _1d
            });
            _1d.unbind(".draggable").bind("mousemove.draggable", {
                target : this
            }, function(e) {
                if (_1) {
                    return;
                }
                var _1e = $.data(e.data.target, "draggable").options;
                if (_1f(e)) {
                    $(this).css("cursor", _1e.cursor);
                } else {
                    $(this).css("cursor", "");
                }
            }).bind("mouseleave.draggable", {
                target : this
            }, function(e) {
                $(this).css("cursor", "");
            }).bind("mousedown.draggable", {
                target : this
            }, function(e) {
                if (_1f(e) == false) {
                    return;
                }
                var _20 = $(e.data.target).position();
                var _21 = {
                    startPosition : $(e.data.target).css("position"),
                    startLeft : _20.left,
                    startTop : _20.top,
                    left : _20.left,
                    top : _20.top,
                    startX : e.pageX,
                    startY : e.pageY,
                    target : e.data.target,
                    parent : $(e.data.target).parent()[0]
                };
                $.extend(e.data, _21);
                var _22 = $.data(e.data.target, "draggable").options;
                if (_22.onBeforeDrag.call(e.data.target, e) == false) {
                    return;
                }
                $(document).bind("mousedown.draggable", e.data, _a);
                $(document).bind("mousemove.draggable", e.data, _f);
                $(document).bind("mouseup.draggable", e.data, _12);
                $("body").css("cursor", _22.cursor);
            });
            function _1f(e) {
                var _23 = $.data(e.data.target, "draggable");
                var _24 = _23.handle;
                var _25 = $(_24).offset();
                var _26 = $(_24).outerWidth();
                var _27 = $(_24).outerHeight();
                var t = e.pageY - _25.top;
                var r = _25.left + _26 - e.pageX;
                var b = _25.top + _27 - e.pageY;
                var l = e.pageX - _25.left;
                return Math.min(t, r, b, l) > _23.options.edge;
            };
        });
    };
    $.fn.draggable.methods = {
        options : function(jq) {
            return $.data(jq[0], "draggable").options;
        },
        proxy : function(jq) {
            return $.data(jq[0], "draggable").proxy;
        },
        enable : function(jq) {
            return jq.each(function() {
                $(this).draggable({
                    disabled : false
                });
            });
        },
        disable : function(jq) {
            return jq.each(function() {
                $(this).draggable({
                    disabled : true
                });
            });
        }
    };
    $.fn.draggable.defaults = {
        proxy : null,
        revert : false,
        cursor : "move",
        deltaX : null,
        deltaY : null,
        handle : null,
        disabled : false,
        edge : 0,
        axis : null,
        onBeforeDrag : function(e) {
        },
        onStartDrag : function(e) {
        },
        onDrag : function(e) {
        },
        onStopDrag : function(e) {
        }
    };
})(jQuery);

//------------------droppable
(function($) {
    function _28(_29) {
        $(_29).addClass("droppable");
        $(_29).bind("_dragenter", function(e, _2a) {
            $.data(_29, "droppable").options.onDragEnter.apply(_29, [e, _2a]);
        });
        $(_29).bind("_dragleave", function(e, _2b) {
            $.data(_29, "droppable").options.onDragLeave.apply(_29, [e, _2b]);
        });
        $(_29).bind("_dragover", function(e, _2c) {
            $.data(_29, "droppable").options.onDragOver.apply(_29, [e, _2c]);
        });
        $(_29).bind("_drop", function(e, _2d) {
            $.data(_29, "droppable").options.onDrop.apply(_29, [e, _2d]);
        });
    };
    $.fn.droppable = function(_2e, _2f) {
        if ( typeof _2e == "string") {
            return $.fn.droppable.methods[_2e](this, _2f);
        }
        _2e = _2e || {};
        return this.each(function() {
            var _30 = $.data(this, "droppable");
            if (_30) {
                $.extend(_30.options, _2e);
            } else {
                _28(this);
                $.data(this, "droppable", {
                    options : $.extend({}, $.fn.droppable.defaults, _2e)
                });
            }
        });
    };
    $.fn.droppable.methods = {};
    $.fn.droppable.defaults = {
        accept : null,
        onDragEnter : function(e, _31) {
        },
        onDragOver : function(e, _32) {
        },
        onDragLeave : function(e, _33) {
        },
        onDrop : function(e, _34) {
        }
    };
})(jQuery);

//----------------------resizable
(function($) {
    var _35 = false;
    $.fn.resizable = function(_36, _37) {
        if ( typeof _36 == "string") {
            return $.fn.resizable.methods[_36](this, _37);
        }
        function _38(e) {
            var _39 = e.data;
            var _3a = $.data(_39.target, "resizable").options;
            if (_39.dir.indexOf("e") != -1) {
                var _3b = _39.startWidth + e.pageX - _39.startX;
                _3b = Math.min(Math.max(_3b, _3a.minWidth), _3a.maxWidth);
                _39.width = _3b;
            }
            if (_39.dir.indexOf("s") != -1) {
                var _3c = _39.startHeight + e.pageY - _39.startY;
                _3c = Math.min(Math.max(_3c, _3a.minHeight), _3a.maxHeight);
                _39.height = _3c;
            }
            if (_39.dir.indexOf("w") != -1) {
                _39.width = _39.startWidth - e.pageX + _39.startX;
                if (_39.width >= _3a.minWidth && _39.width <= _3a.maxWidth) {
                    _39.left = _39.startLeft + e.pageX - _39.startX;
                }
            }
            if (_39.dir.indexOf("n") != -1) {
                _39.height = _39.startHeight - e.pageY + _39.startY;
                if (_39.height >= _3a.minHeight && _39.height <= _3a.maxHeight) {
                    _39.top = _39.startTop + e.pageY - _39.startY;
                }
            }
        };
        function _3d(e) {
            var _3e = e.data;
            var _3f = _3e.target;
            if (!$.boxModel && $.browser.msie) {
                $(_3f).css({
                    width : _3e.width,
                    height : _3e.height,
                    left : _3e.left,
                    top : _3e.top
                });
            } else {
                $(_3f).css({
                    width : _3e.width - _3e.deltaWidth,
                    height : _3e.height - _3e.deltaHeight,
                    left : _3e.left,
                    top : _3e.top
                });
            }
        };
        function _40(e) {
            _35 = true;
            $.data(e.data.target, "resizable").options.onStartResize.call(e.data.target, e);
            return false;
        };
        function _41(e) {
            _38(e);
            if ($.data(e.data.target, "resizable").options.onResize.call(e.data.target, e) != false) {
                _3d(e);
            }
            return false;
        };
        function _42(e) {
            _35 = false;
            _38(e, true);
            _3d(e);
            $.data(e.data.target, "resizable").options.onStopResize.call(e.data.target, e);
            $(document).unbind(".resizable");
            $("body").css("cursor", "auto");
            return false;
        };
        return this.each(function() {
            var _43 = null;
            var _44 = $.data(this, "resizable");
            if (_44) {
                $(this).unbind(".resizable");
                _43 = $.extend(_44.options, _36 || {});
            } else {
                _43 = $.extend({}, $.fn.resizable.defaults, _36 || {});
                $.data(this, "resizable", {
                    options : _43
                });
            }
            if (_43.disabled == true) {
                return;
            }
            $(this).bind("mousemove.resizable", {
                target : this
            }, function(e) {
                if (_35) {
                    return;
                }
                var dir = _45(e);
                if (dir == "") {
                    $(e.data.target).css("cursor", "");
                } else {
                    $(e.data.target).css("cursor", dir + "-resize");
                }
            }).bind("mousedown.resizable", {
                target : this
            }, function(e) {
                var dir = _45(e);
                if (dir == "") {
                    return;
                }
                function _46(css) {
                    var val = parseInt($(e.data.target).css(css));
                    if (isNaN(val)) {
                        return 0;
                    } else {
                        return val;
                    }
                };
                var _47 = {
                    target : e.data.target,
                    dir : dir,
                    startLeft : _46("left"),
                    startTop : _46("top"),
                    left : _46("left"),
                    top : _46("top"),
                    startX : e.pageX,
                    startY : e.pageY,
                    startWidth : $(e.data.target).outerWidth(),
                    startHeight : $(e.data.target).outerHeight(),
                    width : $(e.data.target).outerWidth(),
                    height : $(e.data.target).outerHeight(),
                    deltaWidth : $(e.data.target).outerWidth() - $(e.data.target).width(),
                    deltaHeight : $(e.data.target).outerHeight() - $(e.data.target).height()
                };
                $(document).bind("mousedown.resizable", _47, _40);
                $(document).bind("mousemove.resizable", _47, _41);
                $(document).bind("mouseup.resizable", _47, _42);
                $("body").css("cursor", dir + "-resize");
            }).bind("mouseleave.resizable", {
                target : this
            }, function(e) {
                $(e.data.target).css("cursor", "");
            });
            function _45(e) {
                var tt = $(e.data.target);
                var dir = "";
                var _48 = tt.offset();
                var _49 = tt.outerWidth();
                var _4a = tt.outerHeight();
                var _4b = _43.edge;
                if (e.pageY > _48.top && e.pageY < _48.top + _4b) {
                    dir += "n";
                } else {
                    if (e.pageY < _48.top + _4a && e.pageY > _48.top + _4a - _4b) {
                        dir += "s";
                    }
                }
                if (e.pageX > _48.left && e.pageX < _48.left + _4b) {
                    dir += "w";
                } else {
                    if (e.pageX < _48.left + _49 && e.pageX > _48.left + _49 - _4b) {
                        dir += "e";
                    }
                }
                var _4c = _43.handles.split(",");
                for (var i = 0; i < _4c.length; i++) {
                    var _4d = _4c[i].replace(/(^\s*)|(\s*$)/g, "");
                    if (_4d == "all" || _4d == dir) {
                        return dir;
                    }
                }
                return "";
            };
        });
    };
    $.fn.resizable.methods = {
        options : function(jq) {
            return $.data(jq[0], "resizable").options;
        },
        enable : function(jq) {
            return jq.each(function() {
                $(this).resizable({
                    disabled : false
                });
            });
        },
        disable : function(jq) {
            return jq.each(function() {
                $(this).resizable({
                    disabled : true
                });
            });
        }
    };
    $.fn.resizable.defaults = {
        disabled : false,
        handles : "n, e, s, w, ne, se, sw, nw, all",
        minWidth : 10,
        minHeight : 10,
        maxWidth : 10000,
        maxHeight : 10000,
        edge : 5,
        onStartResize : function(e) {
        },
        onResize : function(e) {
        },
        onStopResize : function(e) {
        }
    };
})(jQuery);

//--------------------linkbutton
(function($) {
    function _4e(_4f) {
        var _50 = $.data(_4f, "linkbutton").options;
        $(_4f).empty();
        $(_4f).addClass("l-btn");
        if (_50.id) {
            $(_4f).attr("id", _50.id);
        } else {
            $(_4f).removeAttr("id");
        }
        if (_50.plain) {
            $(_4f).addClass("l-btn-plain");
        } else {
            $(_4f).removeClass("l-btn-plain");
        }
        if (_50.text) {
            $(_4f).html(_50.text).wrapInner("<span class=\"l-btn-left\">" + "<span class=\"l-btn-text\">" + "</span>" + "</span>");
            if (_50.iconCls) {
                $(_4f).find(".l-btn-text").addClass(_50.iconCls).css("padding-left", "20px");
            }
        } else {
            $(_4f).html("&nbsp;").wrapInner("<span class=\"l-btn-left\">" + "<span class=\"l-btn-text\">" + "<span class=\"l-btn-empty\"></span>" + "</span>" + "</span>");
            if (_50.iconCls) {
                $(_4f).find(".l-btn-empty").addClass(_50.iconCls);
            }
        }
        $(_4f).unbind(".linkbutton").bind("focus.linkbutton", function() {
            if (!_50.disabled) {
                $(this).find("span.l-btn-text").addClass("l-btn-focus");
            }
        }).bind("blur.linkbutton", function() {
            $(this).find("span.l-btn-text").removeClass("l-btn-focus");
        });
        _51(_4f, _50.disabled);
    };
    function _51(_52, _53) {
        var _54 = $.data(_52, "linkbutton");
        if (_53) {
            _54.options.disabled = true;
            var _55 = $(_52).attr("href");
            if (_55) {
                _54.href = _55;
                $(_52).attr("href", "javascript:void(0)");
            }
            if (_52.onclick) {
                _54.onclick = _52.onclick;
                _52.onclick = null;
            }
            $(_52).addClass("l-btn-disabled");
        } else {
            _54.options.disabled = false;
            if (_54.href) {
                $(_52).attr("href", _54.href);
            }
            if (_54.onclick) {
                _52.onclick = _54.onclick;
            }
            $(_52).removeClass("l-btn-disabled");
        }
    };
    $.fn.linkbutton = function(_56, _57) {
        if ( typeof _56 == "string") {
            return $.fn.linkbutton.methods[_56](this, _57);
        }
        _56 = _56 || {};
        return this.each(function() {
            var _58 = $.data(this, "linkbutton");
            if (_58) {
                $.extend(_58.options, _56);
            } else {
                $.data(this, "linkbutton", {
                    options : $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), _56)
                });
                $(this).removeAttr("disabled");
            }
            _4e(this);
        });
    };
    $.fn.linkbutton.methods = {
        options : function(jq) {
            return $.data(jq[0], "linkbutton").options;
        },
        enable : function(jq) {
            return jq.each(function() {
                _51(this, false);
            });
        },
        disable : function(jq) {
            return jq.each(function() {
                _51(this, true);
            });
        }
    };
    $.fn.linkbutton.parseOptions = function(_59) {
        var t = $(_59);
        return {
            id : t.attr("id"),
            disabled : (t.attr("disabled") ? true : undefined),
            plain : (t.attr("plain") ? t.attr("plain") == "true" : undefined),
            text : $.trim(t.html()),
            iconCls : (t.attr("icon") || t.attr("iconCls"))
        };
    };
    $.fn.linkbutton.defaults = {
        id : null,
        disabled : false,
        plain : false,
        text : "",
        iconCls : null
    };
})(jQuery);

//-----------------------------------tree begin---------------------------------
(function($) {
    function _7d(_7e) {
        var _7f = $(_7e);
        _7f.addClass("tree");
        return _7f;
    };

    function _80(_81) {
        var _82 = [];
        _83(_82, $(_81));

        function _83(aa, _84) {
            _84.children("li").each(function() {

                var _85 = $(this);
                var _86 = {};
                _86.text = _85.children("span").html();
                if (!_86.text) {
                    _86.text = _85.html();
                }
                _86.id = _85.attr("id");
                _86.iconCls = _85.attr("iconCls") || _85.attr("icon");
                _86.checked = _85.attr("checked") == "true";
                _86.state = _85.attr("state") || "open";
                var _87 = _85.children("ul");

                if (_87.length) {
                    _86.children = [];
                    _83(_86.children, _87);
                }
                aa.push(_86);

            });
        };

        return _82;
    };

    //bind event
    function _88(_89) {
        var _8a = $.data(_89, "tree").options;
        var _8b = $.data(_89, "tree").tree;
        //-------
        $("span.tree-hit", _8b).unbind(".tree").bind("click.tree", function() {
            var _8c = $(this).parent();
            //如果展开了，则收起来；如果起来了，则展开
            _f7(_89, _8c[0]);
            return false;
        });

        //bind span checkbox event
        $("span.tree-checkbox", _8b).unbind(".tree").bind("click.tree", function() {
            var _8d = $(this).parent();

            //on tree checkbox click
            _aa(_89, _8d[0], !$(this).hasClass("tree-checkbox1"));
            return false;
        }).bind("mousedown.tree", function() {
            return false;
        });
    };

    //set draggable disabled
    function _8e(_8f) {
        var _90 = $(_8f).find("div.tree-node");
        _90.draggable("disable");
        _90.css("cursor", "pointer");
    };

    function _91(_92) {
        var _93 = $.data(_92, "tree").options;
        var _94 = $.data(_92, "tree").tree;
        _94.find("div.tree-node").draggable({
            disabled : false,
            revert : true,
            cursor : "pointer",
            proxy : function(_95) {
                var p = $("<div class=\"tree-node-proxy tree-dnd-no\"></div>").appendTo("body");
                p.html($(_95).find(".tree-title").html());
                p.hide();
                return p;
            },
            deltaX : 15,
            deltaY : 15,
            onBeforeDrag : function(e) {
                if (e.which != 1) {
                    return false;
                }
                $(this).next("ul").find("div.tree-node").droppable({
                    accept : "no-accept"
                });
                var _96 = $(this).find("span.tree-indent");
                if (_96.length) {
                    e.data.startLeft += _96.length * _96.width();
                }
            },
            onStartDrag : function() {
                $(this).draggable("proxy").css({
                    left : -10000,
                    top : -10000
                });
            },
            onDrag : function(e) {
                var x1 = e.pageX, y1 = e.pageY, x2 = e.data.startX, y2 = e.data.startY;
                var d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
                if (d > 3) {
                    $(this).draggable("proxy").show();
                }
                this.pageY = e.pageY;
            },
            onStopDrag : function() {
                $(this).next("ul").find("div.tree-node").droppable({
                    accept : "div.tree-node"
                });
            }
        }).droppable({
            accept : "div.tree-node",
            onDragOver : function(e, _97) {
                var _98 = _97.pageY;
                var top = $(this).offset().top;
                var _99 = top + $(this).outerHeight();
                $(_97).draggable("proxy").removeClass("tree-dnd-no").addClass("tree-dnd-yes");
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
                if (_98 > top + (_99 - top) / 2) {
                    if (_99 - _98 < 5) {
                        $(this).addClass("tree-node-bottom");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                } else {
                    if (_98 - top < 5) {
                        $(this).addClass("tree-node-top");
                    } else {
                        $(this).addClass("tree-node-append");
                    }
                }
            },
            onDragLeave : function(e, _9a) {
                $(_9a).draggable("proxy").removeClass("tree-dnd-yes").addClass("tree-dnd-no");
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
            },
            onDrop : function(e, _9b) {
                var _9c = this;
                var _9d, _9e;
                if ($(this).hasClass("tree-node-append")) {
                    _9d = _9f;
                } else {
                    _9d = _a0;
                    _9e = $(this).hasClass("tree-node-top") ? "top" : "bottom";
                }
                setTimeout(function() {
                    _9d(_9b, _9c, _9e);
                }, 0);
                $(this).removeClass("tree-node-append tree-node-top tree-node-bottom");
            }
        });
        function _9f(_a1, _a2) {
            if (_b3(_92, _a2).state == "closed") {
                _eb(_92, _a2, function() {
                    _a3();
                });
            } else {
                _a3();
            }
            function _a3() {
                var _a4 = $(_92).tree("pop", _a1);
                $(_92).tree("append", {
                    parent : _a2,
                    data : [_a4]
                });
                _93.onDrop.call(_92, _a2, _a4, "append");
            };
        };
        function _a0(_a5, _a6, _a7) {
            var _a8 = {};
            if (_a7 == "top") {
                _a8.before = _a6;
            } else {
                _a8.after = _a6;
            }
            var _a9 = $(_92).tree("pop", _a5);
            _a8.data = _a9;
            $(_92).tree("insert", _a8);
            _93.onDrop.call(_92, _a6, _a9, _a7);
        };
    };

    //on click tree checkbox
    //_ab :tree
    //_ac:current checkbox's parent ,its tree node DIV
    //_ad:!checkbox1
    function _aa(_ab, _ac, _ad) {
        var _ae = $.data(_ab, "tree").options;

        if (!_ae.checkbox) {
            return;
        }

        var _af = $(_ac);

        var ck = _af.find(".tree-checkbox");

        ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");

        //选中与未选中的切换
        if (_ad) {
            ck.addClass("tree-checkbox1");
        } else {
            ck.addClass("tree-checkbox0");
        }

        if (_ae.cascadeCheck) {
            _b0(_af);
            _b1(_af);
        }

        //get the node
        var _b2 = _b3(_ab, _ac);

        //set tree checked on click
        _ae.onCheck.call(_ab, _b2, _ad);

        //cascadeCheck
        function _b1(_b4) {
            var _b5 = _b4.next().find(".tree-checkbox");
            _b5.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
            if (_b4.find(".tree-checkbox").hasClass("tree-checkbox1")) {
                _b5.addClass("tree-checkbox1");
            } else {
                _b5.addClass("tree-checkbox0");
            }
        };

        //cascadeCheck
        //current checkbox's parent ,its tree node DIV
        function _b0(_b6) {
            var _b7 = _102(_ab, _b6[0]);

            if (_b7) {
                var ck = $(_b7.target).find(".tree-checkbox");
                ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");

                //如果他的同级都选中了，则把父节点选中
                if (_b8(_b6)) {
                    ck.addClass("tree-checkbox1");
                } else {
                    //如果全部没选中,设置父节点的状态
                    if (_b9(_b6)) {
                        ck.addClass("tree-checkbox0");
                    }
                    //部分选中,设置父节点的状态
                    else {
                        ck.addClass("tree-checkbox2");
                    }
                }

                //递归其parent...
                _b0($(_b7.target));
            }

            //判断同级的节点是否全部选中了
            //current checkbox's parent ,its tree node DIV
            function _b8(n) {
                var ck = n.find(".tree-checkbox");

                //先判断自己这个节点
                if (ck.hasClass("tree-checkbox0") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }

                var b = true;
                //div 的parent是li，siblings是 li的所有的同辈元素
                n.parent().siblings().each(function() {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox1")) {
                        b = false;
                    }
                });

                return b;

            };

            function _b9(n) {
                var ck = n.find(".tree-checkbox");

                if (ck.hasClass("tree-checkbox1") || ck.hasClass("tree-checkbox2")) {
                    return false;
                }

                var b = true;

                n.parent().siblings().each(function() {
                    if (!$(this).children("div.tree-node").children(".tree-checkbox").hasClass("tree-checkbox0")) {
                        b = false;
                    }
                });

                return b;
            };
        };
    };

    function _ba(_bb, _bc) {
        var _bd = $.data(_bb, "tree").options;
        var _be = $(_bc);
        if (_bf(_bb, _bc)) 
        {
            var ck = _be.find(".tree-checkbox");
            if (ck.length) {
                if (ck.hasClass("tree-checkbox1")) {
                    _aa(_bb, _bc, true);
                } else {
                    _aa(_bb, _bc, false);
                }
            } else {
                if (_bd.onlyLeafCheck) {
                    $("<span class=\"tree-checkbox tree-checkbox0\"></span>").insertBefore(_be.find(".tree-title"));

                    //bind event
                    _88(_bb);
                }
            }
        } 
        else 
        {
            var ck = _be.find(".tree-checkbox");
            if (_bd.onlyLeafCheck) 
            {
                ck.remove();
            } 
            else 
            {
                if (ck.hasClass("tree-checkbox1")) 
                {
                    _aa(_bb, _bc, true);
                } 
                else 
                {
                    if (ck.hasClass("tree-checkbox2")) 
                    {
                        var _c0 = true;
                        var _c1 = true;
                        var _c2 = _c3(_bb, _bc);
                        for (var i = 0; i < _c2.length; i++) 
                        {
                            if (_c2[i].checked) 
                            {
                                _c1 = false;
                            } else {
                                _c0 = false;
                            }
                        }
                        if (_c0) 
                        {
                            _aa(_bb, _bc, true);
                        }
                        if (_c1) {
                            _aa(_bb, _bc, false);
                        }
                    }
                }
            }
        }
    };

    //------------------------------
    function _c4(_c5, ul, _c6, _c7) {
        var _c8 = $.data(_c5, "tree").options;
        //true
        _c6 = _c8.loadFilter.call(_c5, _c6, $(ul).prev("div.tree-node")[0]);

        //undefined
        if (!_c7) {
            $(ul).empty();
        }
        var _c9 = [];
        var _ca = $(ul).prev("div.tree-node").find("span.tree-indent, span.tree-hit").length;

        // init tree html
        _cb(ul, _c6, _ca);

        //bind event
        _88(_c5);

        //------
        //set draggable disabled
        _8e(_c5);

        //bind checkbox event
        for (var i = 0; i < _c9.length; i++) {
            _aa(_c5, _c9[i], true);
        }

        //----------init tree line
        setTimeout(function() {
            _d3(_c5, _c5);
        }, 0);

        var _cc = null;

        //_c5!=ul is false
        if (_c5 != ul) {
            var _cd = $(ul).prev();
            _cc = _b3(_c5, _cd[0]);
        }

        _c8.onLoadSuccess.call(_c5, _cc, _c6);

        // init tree html
        function _cb(ul, _ce, _cf) {
            for (var i = 0; i < _ce.length; i++) {
                var li = $("<li></li>").appendTo(ul);

                var _d0 = _ce[i];

                if (_d0.state != "open" && _d0.state != "closed") {
                    _d0.state = "open";
                }

                var _d1 = $("<div class=\"tree-node\"></div>").appendTo(li);

                _d1.attr("node-id", _d0.id);

                $.data(_d1[0], "tree-node", {
                    id : _d0.id,
                    text : _d0.text,
                    iconCls : _d0.iconCls,
                    attributes : _d0.attributes
                });

                $("<span class=\"tree-title\"></span>").html(_d0.text).appendTo(_d1);

                //-----if checkbox
                if (_c8.checkbox) {
                    if (_c8.onlyLeafCheck) {
                        if (_d0.state == "open" && (!_d0.children || !_d0.children.length)) {
                            if (_d0.checked) {
                                $("<span class=\"tree-checkbox tree-checkbox1\"></span>").prependTo(_d1);
                            } else {
                                $("<span class=\"tree-checkbox tree-checkbox0\"></span>").prependTo(_d1);
                            }
                        }
                    } else {
                        if (_d0.checked) {
                            $("<span class=\"tree-checkbox tree-checkbox1\"></span>").prependTo(_d1);

                            _c9.push(_d1[0]);
                        } else {
                            $("<span class=\"tree-checkbox tree-checkbox0\"></span>").prependTo(_d1);
                        }
                    }
                }

                if (_d0.children && _d0.children.length) {
                    var _d2 = $("<ul></ul>").appendTo(li);
                    if (_d0.state == "open") {
                        $("<span class=\"tree-icon tree-folder tree-folder-open\"></span>").addClass(_d0.iconCls).prependTo(_d1);
                        $("<span class=\"tree-hit tree-expanded\"></span>").prependTo(_d1);
                    } else {
                        $("<span class=\"tree-icon tree-folder\"></span>").addClass(_d0.iconCls).prependTo(_d1);
                        $("<span class=\"tree-hit tree-collapsed\"></span>").prependTo(_d1);
                        _d2.css("display", "none");
                    }

                    _cb(_d2, _d0.children, _cf + 1);
                } else {
                    if (_d0.state == "closed") {
                        $("<span class=\"tree-icon tree-folder\"></span>").addClass(_d0.iconCls).prependTo(_d1);
                        $("<span class=\"tree-hit tree-collapsed\"></span>").prependTo(_d1);
                    } else {
                        $("<span class=\"tree-icon tree-file\"></span>").addClass(_d0.iconCls).prependTo(_d1);
                        $("<span class=\"tree-indent\"></span>").prependTo(_d1);
                    }
                }

                for (var j = 0; j < _cf; j++) {
                    $("<span class=\"tree-indent\"></span>").prependTo(_d1);
                }
            }
        };
    };

    // init tree line
    function _d3(_d4, ul, _d5) {
        var _d6 = $.data(_d4, "tree").options;

        //_d6.lines is false
        if (!_d6.lines) {
            return;
        }

        if (!_d5) {
            _d5 = true;
            $(_d4).find("span.tree-indent").removeClass("tree-line tree-join tree-joinbottom");
            $(_d4).find("div.tree-node").removeClass("tree-node-last tree-root-first tree-root-one");
            var _d7 = $(_d4).tree("getRoots");

            if (_d7.length > 1) {
                $(_d7[0].target).addClass("tree-root-first");
            } else {
                $(_d7[0].target).addClass("tree-root-one");
            }
        }

        $(ul).children("li").each(function() {
            var _d8 = $(this).children("div.tree-node");
            var ul = _d8.next("ul");
            if (ul.length) {
                if ($(this).next().length) {
                    _d9(_d8);
                }

                // init tree line
                _d3(_d4, ul, _d5);
            } else {
                _da(_d8);
            }
        });

        var _db = $(ul).children("li:last").children("div.tree-node").addClass("tree-node-last");
        _db.children("span.tree-join").removeClass("tree-join").addClass("tree-joinbottom");

        function _da(_dc, _dd) {
            var _de = _dc.find("span.tree-icon");
            _de.prev("span.tree-indent").addClass("tree-join");
        };

        function _d9(_df) {
            var _e0 = _df.find("span.tree-indent, span.tree-hit").length;

            _df.next().find("div.tree-node").each(function() {
                $(this).children("span:eq(" + (_e0 - 1) + ")").addClass("tree-line");
            });
        };
    };

    //if url,load data from by url and init tree
    function _e1(_e2, ul, _e3, _e4) {
        var _e5 = $.data(_e2, "tree").options;
        _e3 = _e3 || {};
        var _e6 = null;

        //false
        if (_e2 != ul) {
            var _e7 = $(ul).prev();
            _e6 = _b3(_e2, _e7[0]);
        }

        if (_e5.onBeforeLoad.call(_e2, _e6, _e3) == false) {
            return;
        }

        //------
        var _e8 = $(ul).prev().children("span.tree-folder");

        _e8.addClass("tree-loading");

        var _e9 = _e5.loader.call(_e2, _e3, function(_ea) {

            _e8.removeClass("tree-loading");

            //if url,load data from by url and init tree
            //------------init tree
            _c4(_e2, ul, _ea);

            if (_e4) {
                _e4();
            }
        }, function() {

            _e8.removeClass("tree-loading");
            _e5.onLoadError.apply(_e2, arguments);

            if (_e4) {
                _e4();
            }
        });
        if (_e9 == false) {
            _e8.removeClass("tree-loading");
        }
    };

    //expend next lev tree
    function _eb(_ec, _ed, _ee) {
        var _ef = $.data(_ec, "tree").options;

        var hit = $(_ed).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }

        if (hit.hasClass("tree-expanded")) {
            return;
        }

        //get the node
        var _f0 = _b3(_ec, _ed);


        _ef.onBeforeExpand.call(_ec, _f0);

        hit.removeClass("tree-collapsed tree-collapsed-hover").addClass("tree-expanded");
        hit.next().addClass("tree-folder-open");
        var ul = $(_ed).next();
        if (ul.length) {
            ul.css("display", "block");
            //_ef.onExpand.call(_ec, _f0);
            if (_ee) {
                _ee();
            }
        } else {
            var _f1 = $("<ul style=\"display:none\"></ul>").insertAfter(_ed);

            //if url,load data from by url and init tree
            _e1(_ec, _f1[0], {
                id : _f0.id
            }, function() {
                if (_f1.is(":empty")) {
                    _f1.remove();
                }
                _f1.css("display", "block");
                //_ef.onExpand.call(_ec, _f0);
                if (_ee) {
                    _ee();
                }
            });
        }
    };

    function _f2(_f3, _f4) {
        var _f5 = $.data(_f3, "tree").options;
        var hit = $(_f4).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        if (hit.hasClass("tree-collapsed")) {
            return;
        }
        var _f6 = _b3(_f3, _f4);

        //if (_f5.onBeforeCollapse.call(_f3, _f6) == false) {
        //	return;
        //}

        hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
        hit.next().removeClass("tree-folder-open");
        var ul = $(_f4).next();

        ul.css("display", "none");
        //_f5.onCollapse.call(_f3, _f6);
    };

    function _f7(_f8, _f9) {
        var hit = $(_f9).children("span.tree-hit");
        if (hit.length == 0) {
            return;
        }
        //如果展开了，则收起来；如果起来了，则展开
        if (hit.hasClass("tree-expanded")) {
            _f2(_f8, _f9);
        } else {
            //展开下一级
            _eb(_f8, _f9);
        }
    };

    function _fa(_fb, _fc) {
        var _fd = _c3(_fb, _fc);
        if (_fc) {
            _fd.unshift(_b3(_fb, _fc));
        }
        for (var i = 0; i < _fd.length; i++) {
            _eb(_fb, _fd[i].target);
        }
    };

    function _fe(_ff, _100) {
        var _101 = [];
        var p = _102(_ff, _100);
        while (p) {
            _101.unshift(p);
            p = _102(_ff, p.target);
        }
        for (var i = 0; i < _101.length; i++) {
            _eb(_ff, _101[i].target);
        }
    };

    function _103(_104, _105) {
        var _106 = _c3(_104, _105);
        if (_105) {
            _106.unshift(_b3(_104, _105));
        }
        for (var i = 0; i < _106.length; i++) {
            _f2(_104, _106[i].target);
        }
    };

    function _107(_108) {
        var _109 = _10a(_108);
        if (_109.length) {
            return _109[0];
        } else {
            return null;
        }
    };

    function _10a(_10b) {
        var _10c = [];
        $(_10b).children("li").each(function() {
            var node = $(this).children("div.tree-node");
            _10c.push(_b3(_10b, node[0]));
        });
        return _10c;
    };

    function _c3(_10d, _10e) {
        var _10f = [];
        if (_10e) {
            _110($(_10e));
        } else {
            var _111 = _10a(_10d);
            for (var i = 0; i < _111.length; i++) {
                _10f.push(_111[i]);
                _110($(_111[i].target));
            }
        }
        function _110(node) {
            node.next().find("div.tree-node").each(function() {
                _10f.push(_b3(_10d, this));
            });
        };
        return _10f;
    };

    //tree
    //treeNode
    function _102(_112, _113) {
        var ul = $(_113).parent().parent();

        if (ul[0] == _112) {
            return null;
        } else {
            //get the node
            return _b3(_112, ul.prev()[0]);
        }
    };

    function _114(_115) {
        var _116 = [];
        $(_115).find(".tree-checkbox1").each(function() {
            var node = $(this).parent();
            _116.push(_b3(_115, node[0]));
        });
        return _116;
    };

    function _117(_118) {
        var node = $(_118).find("div.tree-node-selected");
        if (node.length) {
            return _b3(_118, node[0]);
        } else {
            return null;
        }
    };

    //append sub tree
    function _119(_11a, _11b) {
        var node = $(_11b.parent);
        var ul;
        if (node.length == 0) {
            ul = $(_11a);
        } else {
            ul = node.next();
            if (ul.length == 0) {
                ul = $("<ul></ul>").insertAfter(node);
            }
        }
        if (_11b.data && _11b.data.length) {
            var _11c = node.find("span.tree-icon");
            if (_11c.hasClass("tree-file")) {
                _11c.removeClass("tree-file").addClass("tree-folder");
                var hit = $("<span class=\"tree-hit tree-expanded\"></span>").insertBefore(_11c);
                if (hit.prev().length) {
                    hit.prev().remove();
                }
            }
        }

        //------------init tree
        _c4(_11a, ul[0], _11b.data, true);
        
        _ba(_11a, ul.prev());
    };

    function _11d(_11e, _11f) {
        var ref = _11f.before || _11f.after;
        var _120 = _102(_11e, ref);
        var li;
        if (_120) {
            _119(_11e, {
                parent : _120.target,
                data : [_11f.data]
            });
            li = $(_120.target).next().children("li:last");
        } else {
            _119(_11e, {
                parent : null,
                data : [_11f.data]
            });
            li = $(_11e).children("li:last");
        }
        if (_11f.before) {
            li.insertBefore($(ref).parent());
        } else {
            li.insertAfter($(ref).parent());
        }
    };

    function _121(_122, _123) {
        var _124 = _102(_122, _123);
        var node = $(_123);
        var li = node.parent();
        var ul = li.parent();
        li.remove();
        if (ul.children("li").length == 0) {
            var node = ul.prev();
            node.find(".tree-icon").removeClass("tree-folder").addClass("tree-file");
            node.find(".tree-hit").remove();
            $("<span class=\"tree-indent\"></span>").prependTo(node);
            if (ul[0] != _122) {
                ul.remove();
            }
        }
        if (_124) {
            _ba(_122, _124.target);
        }

        // init tree line
        _d3(_122, _122);
    };

    function _125(_126, _127) {
        function _128(aa, ul) {
            ul.children("li").each(function() {
                var node = $(this).children("div.tree-node");
                var _129 = _b3(_126, node[0]);
                var sub = $(this).children("ul");
                if (sub.length) {
                    _129.children = [];
                    _125(_129.children, sub);
                }
                aa.push(_129);
            });
        };
        if (_127) {
            var _12a = _b3(_126, _127);
            _12a.children = [];
            _128(_12a.children, $(_127).next());
            return _12a;
        } else {
            return null;
        }
    };

    function _12b(_12c, _12d) {
        var node = $(_12d.target);
        var data = $.data(_12d.target, "tree-node");
        if (data.iconCls) {
            node.find(".tree-icon").removeClass(data.iconCls);
        }
        $.extend(data, _12d);
        $.data(_12d.target, "tree-node", data);
        node.attr("node-id", data.id);
        node.find(".tree-title").html(data.text);
        if (data.iconCls) {
            node.find(".tree-icon").addClass(data.iconCls);
        }
        var ck = node.find(".tree-checkbox");
        ck.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
        if (data.checked) {
            _aa(_12c, _12d.target, true);
        } else {
            _aa(_12c, _12d.target, false);
        }
    };

    //generate the node
    function _b3(_12e, _12f) {
        var node = $.extend({}, $.data(_12f, "tree-node"), {
            target : _12f,
            checked : $(_12f).find(".tree-checkbox").hasClass("tree-checkbox1")
        });

        //
        if (!_bf(_12e, _12f)) {
            node.state = $(_12f).find(".tree-hit").hasClass("tree-expanded") ? "open" : "closed";
        }
        return node;
    };

    function _130(_131, id) {
        var node = $(_131).find("div.tree-node[node-id=" + id + "]");
        if (node.length) {
            return _b3(_131, node[0]);
        } else {
            return null;
        }
    };

    //addClass("tree-node-selected")
    //---set expend or collapse
    function _132(_133, _134) {
        var opts = $.data(_133, "tree").options;

        //---get the node
        var node = _b3(_133, _134);

        if (opts.onBeforeSelect.call(_133, node) == false) {
            return;
        }
        $("div.tree-node-selected", _133).removeClass("tree-node-selected");
        $(_134).addClass("tree-node-selected");
        opts.onSelect.call(_133, node);
    };

    //tree
    //treeNode ul
    function _bf(_135, _136) {
        var node = $(_136);
        var hit = node.children("span.tree-hit");
        return hit.length == 0;
    };

    function _137(_138, _139) {
        var opts = $.data(_138, "tree").options;
        var node = _b3(_138, _139);
        if (opts.onBeforeEdit.call(_138, node) == false) {
            return;
        }
        $(_139).css("position", "relative");
        var nt = $(_139).find(".tree-title");
        var _13a = nt.outerWidth();
        nt.empty();
        var _13b = $("<input class=\"tree-editor\">").appendTo(nt);
        _13b.val(node.text).focus();
        _13b.width(_13a + 20);
        _13b.height(document.compatMode == "CSS1Compat" ? (18 - (_13b.outerHeight() - _13b.height())) : 18);
        _13b.bind("click", function(e) {
            return false;
        }).bind("mousedown", function(e) {
            e.stopPropagation();
        }).bind("mousemove", function(e) {
            e.stopPropagation();
        }).bind("keydown", function(e) {
            if (e.keyCode == 13) {
                _13c(_138, _139);
                return false;
            } else {
                if (e.keyCode == 27) {
                    _140(_138, _139);
                    return false;
                }
            }
        }).bind("blur", function(e) {
            e.stopPropagation();
            _13c(_138, _139);
        });
    };

    function _13c(_13d, _13e) {
        var opts = $.data(_13d, "tree").options;
        $(_13e).css("position", "");
        var _13f = $(_13e).find("input.tree-editor");
        var val = _13f.val();
        _13f.remove();
        var node = _b3(_13d, _13e);
        node.text = val;
        _12b(_13d, node);
        opts.onAfterEdit.call(_13d, node);
    };

    function _140(_141, _142) {
        var opts = $.data(_141, "tree").options;
        $(_142).css("position", "");
        $(_142).find("input.tree-editor").remove();
        var node = _b3(_141, _142);
        _12b(_141, node);
        opts.onCancelEdit.call(_141, node);
    };

    $.fn.tree = function(_143, _144) {
        if ( typeof _143 == "string") {
            return $.fn.tree.methods[_143](this, _144);
        }

        var _143 = _143 || {};

        return this.each(function() {
            var _145 = $.data(this, "tree");
            var opts;
            if (_145) {
                opts = $.extend(_145.options, _143);
                _145.options = opts;
            } else {
                //-----{data:"...."}
                opts = $.extend({}, $.fn.tree.defaults, $.fn.tree.parseOptions(this), _143);

                //----------
                $.data(this, "tree", {
                    options : opts,
                    tree : _7d(this)
                });

                var data = _80(this);
                if (data.length && !opts.data) {
                    opts.data = data;
                }
            }

            if (opts.lines) {
                $(this).addClass("tree-lines");
            }

            //----------
            if (opts.data) {
                //------------init tree
                _c4(this, this, opts.data);
            } else {
                if (opts.dnd) {
                    _91(this);
                } else {
                    _8e(this);
                }
            }

            //if url,load data from by url and init tree
            _e1(this, this);
        });
    };

    $.fn.tree.methods = {
        options : function(jq) {
            return $.data(jq[0], "tree").options;
        },
        loadData : function(jq, data) {
            return jq.each(function() {

                //------------init tree
                _c4(this, this, data);
            });
        },
        getNode : function(jq, _146) {
            return _b3(jq[0], _146);
        },
        getData : function(jq, _147) {
            return _125(jq[0], _147);
        },
        reload : function(jq, _148) {
            return jq.each(function() {
                if (_148) {
                    var node = $(_148);
                    var hit = node.children("span.tree-hit");
                    hit.removeClass("tree-expanded tree-expanded-hover").addClass("tree-collapsed");
                    node.next().remove();
                    _eb(this, _148);
                } else {
                    $(this).empty();
                    _e1(this, this);
                }
            });
        },
        getRoot : function(jq) {
            return _107(jq[0]);
        },
        getRoots : function(jq) {
            return _10a(jq[0]);
        },
        getParent : function(jq, _149) {
            return _102(jq[0], _149);
        },
        getChildren : function(jq, _14a) {
            return _c3(jq[0], _14a);
        },
        getChecked : function(jq) {
            return _114(jq[0]);
        },
        getSelected : function(jq) {
            return _117(jq[0]);
        },
        isLeaf : function(jq, _14b) {
            return _bf(jq[0], _14b);
        },
        find : function(jq, id) {
            return _130(jq[0], id);
        },
        select : function(jq, _14c) {
            return jq.each(function() {
                _132(this, _14c);
            });
        },
        check : function(jq, _14d) {
            return jq.each(function() {
                _aa(this, _14d, true);
            });
        },
        uncheck : function(jq, _14e) {
            return jq.each(function() {
                _aa(this, _14e, false);
            });
        },
        collapse : function(jq, _14f) {
            return jq.each(function() {
                _f2(this, _14f);
            });
        },
        expand : function(jq, _150) {
            return jq.each(function() {
                _eb(this, _150);
            });
        },
        collapseAll : function(jq, _151) {
            return jq.each(function() {
                _103(this, _151);
            });
        },
        expandAll : function(jq, _152) {
            return jq.each(function() {
                _fa(this, _152);
            });
        },
        expandTo : function(jq, _153) {
            return jq.each(function() {
                _fe(this, _153);
            });
        },
        toggle : function(jq, _154) {
            return jq.each(function() {
                _f7(this, _154);
            });
        },
        append : function(jq, _155) {
            return jq.each(function() {
                _119(this, _155);
            });
        },
        insert : function(jq, _156) {
            return jq.each(function() {
                _11d(this, _156);
            });
        },
        remove : function(jq, _157) {
            return jq.each(function() {
                _121(this, _157);
            });
        },
        pop : function(jq, _158) {
            var node = jq.tree("getData", _158);
            jq.tree("remove", _158);
            return node;
        },
        update : function(jq, _159) {
            return jq.each(function() {
                _12b(this, _159);
            });
        },
        enableDnd : function(jq) {
            return jq.each(function() {
                _91(this);
            });
        },
        disableDnd : function(jq) {
            return jq.each(function() {
                _8e(this);
            });
        },
        beginEdit : function(jq, _15a) {
            return jq.each(function() {
                _137(this, _15a);
            });
        },
        endEdit : function(jq, _15b) {
            return jq.each(function() {
                _13c(this, _15b);
            });
        },
        cancelEdit : function(jq, _15c) {
            return jq.each(function() {
                _140(this, _15c);
            });
        }
    };

    //need to modify the method,if we want to set json data in html
    $.fn.tree.parseOptions = function(_15d) {
        var t = $(_15d);
        var the_opt = {
            url : (t.attr("url") ? t.attr("url") : undefined),
            data : (t.attr("data") ? t.attr("data") : undefined),
            method : (t.attr("method") ? t.attr("method") : undefined),
            checkbox : (t.attr("checkbox") ? t.attr("checkbox") == "true" : undefined),
            cascadeCheck : (t.attr("cascadeCheck") ? t.attr("cascadeCheck") == "true" : undefined),
            onlyLeafCheck : (t.attr("onlyLeafCheck") ? t.attr("onlyLeafCheck") == "true" : undefined),
            //animate : (t.attr("animate") ? t.attr("animate") == "true" : undefined),
            lines : (t.attr("lines") ? t.attr("lines") == "true" : undefined),
            dnd : (t.attr("dnd") ? t.attr("dnd") == "true" : undefined)
        };

        return the_opt;
    };

    $.fn.tree.defaults = {
        url : null,
        method : "post",
        animate : false,
        checkbox : false,
        //原来为true，我改为false了。
        cascadeCheck : false,
        onlyLeafCheck : false,
        lines : false,
        dnd : false,
        data : null,
        loader : function(_15e, _15f, _160) {
            var opts = $(this).tree("options");

            //----------
            if (!opts.url) {
                return false;
            }

            $.ajax({
                type : opts.method,
                url : opts.url,
                data : _15e,
                dataType : "json",
                success : function(data) {

                    //-----
                    _15f(data);

                },
                error : function() {
                    _160.apply(this, arguments);
                }
            });
        },
        loadFilter : function(data, _161) {
            return data;
        },
        onBeforeLoad : function(node, _162) {
        },
        onLoadSuccess : function(node, data) {
        },
        onLoadError : function() {
        },
        onClick : function(node) {
        },
        onDblClick : function(node) {
        },
        onBeforeExpand : function(node) {
        },
        onExpand : function(node) {
        },
        onBeforeCollapse : function(node) {
        },
        onCollapse : function(node) {
        },
        onCheck : function(node, _163) {
        },
        onBeforeSelect : function(node) {
        },
        onSelect : function(node) {
        },
        onContextMenu : function(e, node) {
        },
        onDrop : function(_164, _165, _166) {
        },
        onBeforeEdit : function(node) {
        },
        onAfterEdit : function(node) {
        },
        onCancelEdit : function(node) {
        }
    };

})(jQuery);

//-----------------------------------tree end---------------------------------

//------------------------------parser -------------------

(function($) {
    $.parser = {
        auto : true,
        onComplete : function(_167) {
        },
        plugins : [],
        //["linkbutton","menu","menubutton","splitbutton","progressbar","tree","combobox","combotree","numberbox","validatebox","searchbox","numberspinner","timespinner","calendar","datebox","datetimebox","slider","layout","panel","datagrid","propertygrid","treegrid","tabs","accordion","window","dialog"],
        parse : function(_168) {
            var aa = [];
            for (var i = 0; i < $.parser.plugins.length; i++) {
                var name = $.parser.plugins[i];
                var r = $(".easyui-" + name, _168);
                if (r.length) {
                    if (r[name]) {
                        r[name]();
                    } else {
                        aa.push({
                            name : name,
                            jq : r
                        });
                    }
                }
            }
            if (aa.length && window.easyloader) {
                var _169 = [];
                for (var i = 0; i < aa.length; i++) {
                    _169.push(aa[i].name);
                }
                easyloader.load(_169, function() {
                    for (var i = 0; i < aa.length; i++) {
                        var name = aa[i].name;
                        var jq = aa[i].jq;
                        jq[name]();
                    }
                    $.parser.onComplete.call($.parser, _168);
                });
            } else {
                $.parser.onComplete.call($.parser, _168);
            }
        }
    };
    $(function() {
        if (!window.easyloader && $.parser.auto) {
            $.parser.parse();
        }
    });
})(jQuery);

//--------------------- panel begin ------------------------
(function($) {
    function _179(node) {
        node.each(function() {
            $(this).remove();
            if ($.browser.msie) {
                this.outerHTML = "";
            }
        });
    };

    function _17a(_17b, _17c) {
        var opts = $.data(_17b, "panel").options;
        var _17d = $.data(_17b, "panel").panel;
        var _17e = _17d.children("div.panel-header");
        var _17f = _17d.children("div.panel-body");
        if (_17c) {
            if (_17c.width) {
                opts.width = _17c.width;
            }
            if (_17c.height) {
                opts.height = _17c.height;
            }
            if (_17c.left != null) {
                opts.left = _17c.left;
            }
            if (_17c.top != null) {
                opts.top = _17c.top;
            }
        }
        if (opts.fit == true) {
            var p = _17d.parent();
            p.addClass("panel-noscroll");
            opts.width = p.width();
            opts.height = p.height();
        }

        _17d.css({
            left : opts.left,
            top : opts.top
        });
        if (!isNaN(opts.width)) {
            _17d._outerWidth(opts.width);
        } else {
            _17d.width("auto");
        }

        _17e.add(_17f)._outerWidth(_17d.width());

        if (!isNaN(opts.height)) {
            _17d._outerHeight(opts.height);
            _17f._outerHeight(_17d.height() - _17e.outerHeight());
        }
        /*
         else
         {
         _17f.height("auto");
         }
         */

        _17d.css("height", "");

        opts.onResize.apply(_17b, [opts.width, opts.height]);

        _17d.find(">div.panel-body>div").triggerHandler("_resize");
    };

    function _180(_181, _182) {
        var opts = $.data(_181, "panel").options;
        var _183 = $.data(_181, "panel").panel;
        if (_182) {
            if (_182.left != null) {
                opts.left = _182.left;
            }
            if (_182.top != null) {
                opts.top = _182.top;
            }
        }
        _183.css({
            left : opts.left,
            top : opts.top
        });
        opts.onMove.apply(_181, [opts.left, opts.top]);
    };

    function _184(_185) {
        var _186 = $(_185).addClass("panel-body").wrap("<div class=\"panel\"></div>").parent();

        _186.bind("_resize", function() {
            var opts = $.data(_185, "panel").options;
            if (opts.fit == true) {
                _17a(_185);
            }
            return false;
        });
        return _186;
    };

    //append the panel to body,and set the panel header
    function _187(_188) {
        var opts = $.data(_188, "panel").options;

        var _189 = $.data(_188, "panel").panel;

        if (opts.tools && typeof opts.tools == "string") {
            _189.find(">div.panel-header>div.panel-tool .panel-tool-a").appendTo(opts.tools);
        }

        _179(_189.children("div.panel-header"));

        if (opts.title && !opts.noheader) {
            var _18a = $("<div class=\"panel-header\"><div class=\"panel-title\">" + opts.title + "</div></div>").prependTo(_189);
            if (opts.iconCls) {
                _18a.find(".panel-title").addClass("panel-with-icon");
                $("<div class=\"panel-icon\"></div>").addClass(opts.iconCls).appendTo(_18a);
            }

            var tool = $("<div class=\"panel-tool\"></div>").appendTo(_18a);
            if (opts.tools) {
                if ( typeof opts.tools == "string") {
                    $(opts.tools).children().each(function() {
                        $(this).addClass($(this).attr("iconCls")).addClass("panel-tool-a").appendTo(tool);
                    });
                } else {
                    for (var i = 0; i < opts.tools.length; i++) {
                        var t = $("<a href=\"javascript:void(0)\"></a>").addClass(opts.tools[i].iconCls).appendTo(tool);
                        if (opts.tools[i].handler) {
                            t.bind("click", eval(opts.tools[i].handler));
                        }
                    }
                }
            }
            if (opts.collapsible) {
                $("<a class=\"panel-tool-collapse\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
                    if (opts.collapsed == true) {
                        _1a4(_188, true);
                    } else {
                        _199(_188, true);
                    }
                    return false;
                });
            }
            if (opts.minimizable) {
                $("<a class=\"panel-tool-min\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
                    _1aa(_188);
                    return false;
                });
            }
            if (opts.maximizable) {
                $("<a class=\"panel-tool-max\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
                    if (opts.maximized == true) {
                        _1ad(_188);
                    } else {
                        _198(_188);
                    }
                    return false;
                });
            }
            if (opts.closable) {
                $("<a class=\"panel-tool-close\" href=\"javascript:void(0)\"></a>").appendTo(tool).bind("click", function() {
                    _18b(_188);
                    return false;
                });
            }

            //---------------
            _189.children("div.panel-body").removeClass("panel-body-noheader");
        } else {
            //-----------
            _189.children("div.panel-body").addClass("panel-body-noheader");
        }
    };

    function _18c(_18d) {
        var _18e = $.data(_18d, "panel");
        if (_18e.options.href && (!_18e.isLoaded || !_18e.options.cache)) {
            _18e.isLoaded = false;
            _18f(_18d);
            var _190 = _18e.panel.find(">div.panel-body");
            if (_18e.options.loadingMessage) {
                _190.html($("<div class=\"panel-loading\"></div>").html(_18e.options.loadingMessage));
            }
            $.ajax({
                url : _18e.options.href,
                cache : false,
                success : function(data) {
                    _190.html(_18e.options.extractor.call(_18d, data));
                    if ($.parser) {
                        $.parser.parse(_190);
                    }
                    _18e.options.onLoad.apply(_18d, arguments);
                    _18e.isLoaded = true;
                }
            });
        }
    };

    function _18f(_191) {
        var t = $(_191);
        t.find(".combo-f").each(function() {
            $(this).combo("destroy");
        });
        t.find(".m-btn").each(function() {
            $(this).menubutton("destroy");
        });
        t.find(".s-btn").each(function() {
            $(this).splitbutton("destroy");
        });
    };

    function _192(_193) {
        $(_193).find("div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible").each(function() {
            $(this).triggerHandler("_resize", [true]);
        });
    };

    //open panel
    function _194(_195, _196) {
        var opts = $.data(_195, "panel").options;
        var _197 = $.data(_195, "panel").panel;
        if (_196 != true) {
            if (opts.onBeforeOpen.call(_195) == false) {
                return;
            }
        }

        //
        _197.show();

        opts.closed = false;
        opts.minimized = false;
        opts.onOpen.call(_195);
        if (opts.maximized == true) {
            opts.maximized = false;
            _198(_195);
        }
        if (opts.collapsed == true) {
            opts.collapsed = false;
            _199(_195);
        }
        if (!opts.collapsed) {
            _18c(_195);
            _192(_195);
        }
    };

    function _18b(_19a, _19b) {
        var opts = $.data(_19a, "panel").options;
        var _19c = $.data(_19a, "panel").panel;
        if (_19b != true) {
            if (opts.onBeforeClose.call(_19a) == false) {
                return;
            }
        }
        _19c.hide();
        opts.closed = true;
        opts.onClose.call(_19a);
    };

    //destory
    function _19d(_19e, _19f) {
        var opts = $.data(_19e, "panel").options;
        var _1a0 = $.data(_19e, "panel").panel;
        if (_19f != true) {
            if (opts.onBeforeDestroy.call(_19e) == false) {
                return;
            }

        }
        _18f(_19e);
        _179(_1a0);
        opts.onDestroy.call(_19e);
    };

    function _199(_1a1, _1a2) {
        var opts = $.data(_1a1, "panel").options;
        var _1a3 = $.data(_1a1, "panel").panel;
        var body = _1a3.children("div.panel-body");
        var tool = _1a3.children("div.panel-header").find("a.panel-tool-collapse");
        if (opts.collapsed == true) {
            return;
        }
        body.stop(true, true);
        if (opts.onBeforeCollapse.call(_1a1) == false) {
            return;
        }
        tool.addClass("panel-tool-expand");
        if (_1a2 == true) {
            body.slideUp("normal", function() {
                opts.collapsed = true;
                opts.onCollapse.call(_1a1);
            });
        } else {
            body.hide();
            opts.collapsed = true;
            opts.onCollapse.call(_1a1);
        }
    };

    function _1a4(_1a5, _1a6) {
        var opts = $.data(_1a5, "panel").options;
        var _1a7 = $.data(_1a5, "panel").panel;
        var body = _1a7.children("div.panel-body");
        var tool = _1a7.children("div.panel-header").find("a.panel-tool-collapse");
        if (opts.collapsed == false) {
            return;
        }
        body.stop(true, true);
        if (opts.onBeforeExpand.call(_1a5) == false) {
            return;
        }
        tool.removeClass("panel-tool-expand");
        if (_1a6 == true) {
            body.slideDown("normal", function() {
                opts.collapsed = false;
                opts.onExpand.call(_1a5);
                _18c(_1a5);
                _192(_1a5);
            });
        } else {
            body.show();
            opts.collapsed = false;
            opts.onExpand.call(_1a5);
            _18c(_1a5);
            _192(_1a5);
        }
    };

    function _198(_1a8) {
        var opts = $.data(_1a8, "panel").options;
        var _1a9 = $.data(_1a8, "panel").panel;
        var tool = _1a9.children("div.panel-header").find("a.panel-tool-max");
        if (opts.maximized == true) {
            return;
        }
        tool.addClass("panel-tool-restore");
        if (!$.data(_1a8, "panel").original) {
            $.data(_1a8, "panel").original = {
                width : opts.width,
                height : opts.height,
                left : opts.left,
                top : opts.top,
                fit : opts.fit
            };
        }
        opts.left = 0;
        opts.top = 0;
        opts.fit = true;
        _17a(_1a8);
        opts.minimized = false;
        opts.maximized = true;
        opts.onMaximize.call(_1a8);
    };

    function _1aa(_1ab) {
        var opts = $.data(_1ab, "panel").options;
        var _1ac = $.data(_1ab, "panel").panel;
        _1ac.hide();
        opts.minimized = true;
        opts.maximized = false;
        opts.onMinimize.call(_1ab);
    };

    function _1ad(_1ae) {
        var opts = $.data(_1ae, "panel").options;
        var _1af = $.data(_1ae, "panel").panel;
        var tool = _1af.children("div.panel-header").find("a.panel-tool-max");
        if (opts.maximized == false) {
            return;
        }
        _1af.show();
        tool.removeClass("panel-tool-restore");
        var _1b0 = $.data(_1ae, "panel").original;
        opts.width = _1b0.width;
        opts.height = _1b0.height;
        opts.left = _1b0.left;
        opts.top = _1b0.top;
        opts.fit = _1b0.fit;
        _17a(_1ae);
        opts.minimized = false;
        opts.maximized = false;
        $.data(_1ae, "panel").original = null;
        opts.onRestore.call(_1ae);
    };

    function _1b1(_1b2) {
        var opts = $.data(_1b2, "panel").options;
        var _1b3 = $.data(_1b2, "panel").panel;
        var _1b4 = $(_1b2).panel("header");
        var body = $(_1b2).panel("body");
        _1b3.css(opts.style);
        _1b3.addClass(opts.cls);
        if (opts.border) {
            _1b4.removeClass("panel-header-noborder");
            body.removeClass("panel-body-noborder");
        } else {
            _1b4.addClass("panel-header-noborder");
            body.addClass("panel-body-noborder");
        }

        _1b4.addClass(opts.headerCls);

        body.addClass(opts.bodyCls);

        if (opts.id) {
            $(_1b2).attr("id", opts.id);
        } else {
            $(_1b2).removeAttr("id");
        }
    };

    function _1b5(_1b6, _1b7) {
        $.data(_1b6, "panel").options.title = _1b7;
        $(_1b6).panel("header").find("div.panel-title").html(_1b7);
    };

    var TO = false;
    var _1b8 = true;

    $(window).unbind(".panel").bind("resize.panel", function() {

        if (!_1b8) {
            return;
        }
        if (TO !== false) {
            clearTimeout(TO);
        }
        TO = setTimeout(function() {
            _1b8 = false;
            var _1b9 = $("body.layout");
            if (_1b9.length) {
                _1b9.layout("resize");
            } else {
                $("body").children("div.panel,div.accordion,div.tabs-container,div.layout").triggerHandler("_resize");
            }
            _1b8 = true;
            TO = false;
        }, 200);
    });

    //------
    $.fn.panel = function(_1ba, _1bb) {
        if ( typeof _1ba == "string") {
            return $.fn.panel.methods[_1ba](this, _1bb);
        }

        _1ba = _1ba || {};

        return this.each(function() {
            var _1bc = $.data(this, "panel");
            var opts;
            if (_1bc) {
                opts = $.extend(_1bc.options, _1ba);
            } else {
                opts = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), _1ba);

                $(this).attr("title", "");

                _1bc = $.data(this, "panel", {
                    options : opts,

                    //init the panel html
                    panel : _184(this),
                    isLoaded : false
                });
            }

            if (opts.content) {
                $(this).html(opts.content);
                if ($.parser) {
                    $.parser.parse(this);
                }
            }

            //append the panel to body,and set the panel header
            _187(this);

            //set class
            _1b1(this);

            if (opts.doSize == true) {
                _1bc.panel.css("display", "block");
                _17a(this);
            }
            if (opts.closed == true || opts.minimized == true) {
                _1bc.panel.hide();
            } else {
                //open panel
                _194(this);
            }
        });
    };

    $.fn._outerWidth = function(_1bd) {
        return this.each(function() {
            if (!$.boxModel && $.browser.msie) {
                $(this).width(_1bd);
            } else {
                $(this).width(_1bd - ($(this).outerWidth() - $(this).width()));
            }
        });
    };

    $.fn._outerHeight = function(_1be) {
        return this.each(function() {
            if (!$.boxModel && $.browser.msie) {
                $(this).height(_1be);
            } else {
                $(this).height(_1be - ($(this).outerHeight() - $(this).height()));
            }
        });
    };

    $.fn.panel.methods = {

        options : function(jq) {
            return $.data(jq[0], "panel").options;
        },
        panel : function(jq) {
            return $.data(jq[0], "panel").panel;
        },
        header : function(jq) {
            return $.data(jq[0], "panel").panel.find(">div.panel-header");
        },
        body : function(jq) {
            return $.data(jq[0], "panel").panel.find(">div.panel-body");
        },
        setTitle : function(jq, _1bf) {
            return jq.each(function() {
                _1b5(this, _1bf);
            });
        },
        open : function(jq, _1c0) {
            return jq.each(function() {

                //open panel
                _194(this, _1c0);
            });
        },
        close : function(jq, _1c1) {
            return jq.each(function() {
                _18b(this, _1c1);
            });
        },
        destroy : function(jq, _1c2) {
            return jq.each(function() {

                //
                _19d(this, _1c2);
            });
        },
        refresh : function(jq, href) {
            return jq.each(function() {
                $.data(this, "panel").isLoaded = false;
                if (href) {
                    $.data(this, "panel").options.href = href;
                }
                _18c(this);
            });
        },
        resize : function(jq, _1c3) {
            return jq.each(function() {
                _17a(this, _1c3);
            });
        },
        move : function(jq, _1c4) {
            return jq.each(function() {
                _180(this, _1c4);
            });
        },
        maximize : function(jq) {
            return jq.each(function() {
                _198(this);
            });
        },
        minimize : function(jq) {
            return jq.each(function() {
                _1aa(this);
            });
        },
        restore : function(jq) {
            return jq.each(function() {
                _1ad(this);
            });
        },
        collapse : function(jq, _1c5) {
            return jq.each(function() {
                _199(this, _1c5);
            });
        },
        expand : function(jq, _1c6) {
            return jq.each(function() {
                _1a4(this, _1c6);
            });
        }
    };

    $.fn.panel.parseOptions = function(_1c7) {
        var t = $(_1c7);
        return {
            id : t.attr("id"),
            width : (parseInt(_1c7.style.width) || undefined),
            height : (parseInt(_1c7.style.height) || undefined),
            left : (parseInt(_1c7.style.left) || undefined),
            top : (parseInt(_1c7.style.top) || undefined),
            title : (t.attr("title") || undefined),
            iconCls : (t.attr("iconCls") || t.attr("icon")),
            cls : t.attr("cls"),
            headerCls : t.attr("headerCls"),
            bodyCls : t.attr("bodyCls"),
            tools : t.attr("tools"),
            href : t.attr("href"),
            loadingMessage : (t.attr("loadingMessage") != undefined ? t.attr("loadingMessage") : undefined),
            cache : (t.attr("cache") ? t.attr("cache") == "true" : undefined),
            fit : (t.attr("fit") ? t.attr("fit") == "true" : undefined),
            border : (t.attr("border") ? t.attr("border") == "true" : undefined),
            noheader : (t.attr("noheader") ? t.attr("noheader") == "true" : undefined),
            collapsible : (t.attr("collapsible") ? t.attr("collapsible") == "true" : undefined),
            minimizable : (t.attr("minimizable") ? t.attr("minimizable") == "true" : undefined),
            maximizable : (t.attr("maximizable") ? t.attr("maximizable") == "true" : undefined),
            closable : (t.attr("closable") ? t.attr("closable") == "true" : undefined),
            collapsed : (t.attr("collapsed") ? t.attr("collapsed") == "true" : undefined),
            minimized : (t.attr("minimized") ? t.attr("minimized") == "true" : undefined),
            maximized : (t.attr("maximized") ? t.attr("maximized") == "true" : undefined),
            closed : (t.attr("closed") ? t.attr("closed") == "true" : undefined)
        };
    };

    $.fn.panel.defaults = {
        id : null,
        title : null,
        iconCls : null,
        width : "auto",
        height : "auto",
        left : null,
        top : null,
        cls : null,
        headerCls : null,
        bodyCls : null,
        style : {},
        href : null,
        cache : true,
        fit : false,
        border : true,
        doSize : true,
        noheader : false,
        content : null,
        collapsible : false,
        minimizable : false,
        maximizable : false,
        //
        closable : false,
        collapsed : false,
        minimized : false,
        maximized : false,
        closed : false,
        tools : null,
        href : null,
        loadingMessage : "Loading...",
        extractor : function(data) {

            var _1c8 = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
            var _1c9 = _1c8.exec(data);
            if (_1c9) {
                return _1c9[1];
            } else {
                return data;
            }
        },

        onLoad : function() {
        },
        onBeforeOpen : function() {
        },
        onOpen : function() {
        },
        onBeforeClose : function() {
        },
        onClose : function() {
        },
        onBeforeDestroy : function() {
        },
        onDestroy : function() {
        },
        onResize : function(_1ca, _1cb) {
        },
        onMove : function(left, top) {
        },
        onMaximize : function() {
        },
        onRestore : function() {
        },
        onMinimize : function() {
        },
        onBeforeCollapse : function() {
        },
        onBeforeExpand : function() {
        },
        onCollapse : function() {
        },
        onExpand : function() {
        }
    };
})(jQuery);
//--------------------- panel end-----------------------------

//--------------------- window begin--------------------------
(function($) {

    function _1cc(_1cd, _1ce) {
        var opts = $.data(_1cd, "window").options;
        if (_1ce) {
            if (_1ce.width) {
                opts.width = _1ce.width;
            }
            if (_1ce.height) {
                opts.height = _1ce.height;
            }
            if (_1ce.left != null) {
                opts.left = _1ce.left;
            }
            if (_1ce.top != null) {
                opts.top = _1ce.top;
            }
        }
        $(_1cd).panel("resize", opts);
    };

    // set position
    function _1cf(_1d0, _1d1) {
        var _1d2 = $.data(_1d0, "window");

        if (_1d1) {
            if (_1d1.left != null) {
                _1d2.options.left = _1d1.left;
            }
            if (_1d1.top != null) {
                _1d2.options.top = _1d1.top;
            }
        }

        //set panel position
        $(_1d0).panel("move", _1d2.options);

        //set shadow position
        if (_1d2.shadow) {
            _1d2.shadow.css({
                left : _1d2.options.left,
                top : _1d2.options.top
            });
        }
    };

    //init the window html,and setPosition
    function _1d3(_1d4) {
        var _1d5 = $.data(_1d4, "window");

        // open a panel
        var win = $(_1d4).panel($.extend({}, _1d5.options, {
            border : false,
            doSize : true,
            closed : true,
            cls : "window",
            headerCls : "window-header",
            bodyCls : "window-body " + (_1d5.options.noheader ? "window-body-noheader" : ""),
            onBeforeDestroy : function() {
                if (_1d5.options.onBeforeDestroy.call(_1d4) == false) {
                    return false;
                }
                if (_1d5.shadow) {
                    _1d5.shadow.remove();
                }
                if (_1d5.mask) {
                    _1d5.mask.remove();
                }
            },
            onClose : function() {
                if (_1d5.shadow) {
                    _1d5.shadow.hide();
                }
                if (_1d5.mask) {
                    _1d5.mask.hide();
                }
                _1d5.options.onClose.call(_1d4);
            },
            onOpen : function() {
                if (_1d5.mask) {
                    _1d5.mask.css({
                        display : "block",
                        zIndex : $.fn.window.defaults.zIndex++
                    });
                }
                if (_1d5.shadow) {
                    _1d5.shadow.css({
                        display : "block",
                        zIndex : $.fn.window.defaults.zIndex++,
                        left : _1d5.options.left,
                        top : _1d5.options.top,
                        width : _1d5.window.outerWidth(),
                        height : _1d5.window.outerHeight()
                    });
                }
                _1d5.window.css("z-index", $.fn.window.defaults.zIndex++);
                _1d5.options.onOpen.call(_1d4);
            },
            onResize : function(_1d6, _1d7) {
                var opts = $(_1d4).panel("options");
                _1d5.options.width = opts.width;
                _1d5.options.height = opts.height;
                _1d5.options.left = opts.left;
                _1d5.options.top = opts.top;
                if (_1d5.shadow) {
                    _1d5.shadow.css({
                        left : _1d5.options.left,
                        top : _1d5.options.top,
                        width : _1d5.window.outerWidth(),
                        height : _1d5.window.outerHeight()
                    });
                }
                _1d5.options.onResize.call(_1d4, _1d6, _1d7);
            },
            onMinimize : function() {
                if (_1d5.shadow) {
                    _1d5.shadow.hide();
                }
                if (_1d5.mask) {
                    _1d5.mask.hide();
                }
                _1d5.options.onMinimize.call(_1d4);
            },
            onBeforeCollapse : function() {
                if (_1d5.options.onBeforeCollapse.call(_1d4) == false) {
                    return false;
                }
                if (_1d5.shadow) {
                    _1d5.shadow.hide();
                }
            },
            onExpand : function() {
                if (_1d5.shadow) {
                    _1d5.shadow.show();
                }
                _1d5.options.onExpand.call(_1d4);
            }
        }));
        // end of openPanel

        _1d5.window = win.panel("panel");

        if (_1d5.mask) {
            _1d5.mask.remove();
        }
        if (_1d5.options.modal == true) {
            _1d5.mask = $("<div class=\"window-mask\"></div>").insertAfter(_1d5.window);
            _1d5.mask.css({
                width : (_1d5.options.inline ? _1d5.mask.parent().width() : _1d8().width),
                height : (_1d5.options.inline ? _1d5.mask.parent().height() : _1d8().height),
                display : "none"
            });
        }
        if (_1d5.shadow) {
            _1d5.shadow.remove();
        }

        //shandow
        if (_1d5.options.shadow == true) {
            //iframe to cover the select of ie6
            _1d5.shadow = $("<div class=\"window-shadow\"><iframe style = \"width:100%;height:100%;\"></iframe></div>").insertAfter(_1d5.window);
            _1d5.shadow.css({
                display : "none"
            });
        }
        if (_1d5.options.left == null) {
            var _1d9 = _1d5.options.width;
            if (isNaN(_1d9)) {
                _1d9 = _1d5.window.outerWidth();
            }
            if (_1d5.options.inline) {
                var _1da = _1d5.window.parent();
                _1d5.options.left = (_1da.width() - _1d9) / 2 + _1da.scrollLeft();
            } else {
                _1d5.options.left = ($(window).width() - _1d9) / 2 + $(document).scrollLeft();
            }
        }
        if (_1d5.options.top == null) {
            var _1db = _1d5.window.height;
            if (isNaN(_1db)) {
                _1db = _1d5.window.outerHeight();
            }
            if (_1d5.options.inline) {
                var _1da = _1d5.window.parent();
                _1d5.options.top = (_1da.height() - _1db) / 2 + _1da.scrollTop();
            } else {
                _1d5.options.top = ($(window).height() - _1db) / 2 + $(document).scrollTop();
            }
        }

        //set position
        _1cf(_1d4);

        if (_1d5.options.closed == false) {
            win.window("open");
        }
    };

    //set z-index
    function _1dc(_1dd) {
        var _1de = $.data(_1dd, "window");
        _1de.window.draggable({
            handle : ">div.panel-header>div.panel-title",
            disabled : _1de.options.draggable == false,
            onStartDrag : function(e) {
                if (_1de.mask) {
                    _1de.mask.css("z-index", $.fn.window.defaults.zIndex++);
                }

                //set shadow z-index
                if (_1de.shadow) {
                    _1de.shadow.css("z-index", $.fn.window.defaults.zIndex++);
                }

                //set window content z-index
                _1de.window.css("z-index", $.fn.window.defaults.zIndex++);

                // init window-proxy html,set its position and z-index
                if (!_1de.proxy) {
                    _1de.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_1de.window);
                }
                _1de.proxy.css({
                    display : "none",
                    zIndex : $.fn.window.defaults.zIndex++,
                    left : e.data.left,
                    top : e.data.top
                });
                _1de.proxy._outerWidth(_1de.window.outerWidth());
                _1de.proxy._outerHeight(_1de.window.outerHeight());
                setTimeout(function() {
                    if (_1de.proxy) {
                        _1de.proxy.show();
                    }
                }, 500);
            },
            onDrag : function(e) {
                _1de.proxy.css({
                    display : "block",
                    left : e.data.left,
                    top : e.data.top
                });
                return false;
            },
            onStopDrag : function(e) {
                _1de.options.left = e.data.left;
                _1de.options.top = e.data.top;
                $(_1dd).window("move");
                _1de.proxy.remove();
                _1de.proxy = null;
            }
        });

        _1de.window.resizable({
            disabled : _1de.options.resizable == false,
            onStartResize : function(e) {
                _1de.pmask = $("<div class=\"window-proxy-mask\"></div>").insertAfter(_1de.window);
                _1de.pmask.css({
                    zIndex : $.fn.window.defaults.zIndex++,
                    left : e.data.left,
                    top : e.data.top,
                    width : _1de.window.outerWidth(),
                    height : _1de.window.outerHeight()
                });
                if (!_1de.proxy) {
                    _1de.proxy = $("<div class=\"window-proxy\"></div>").insertAfter(_1de.window);
                }
                _1de.proxy.css({
                    zIndex : $.fn.window.defaults.zIndex++,
                    left : e.data.left,
                    top : e.data.top
                });
                _1de.proxy._outerWidth(e.data.width);
                _1de.proxy._outerHeight(e.data.height);
            },
            onResize : function(e) {
                _1de.proxy.css({
                    left : e.data.left,
                    top : e.data.top
                });
                _1de.proxy._outerWidth(e.data.width);
                _1de.proxy._outerHeight(e.data.height);
                return false;
            },
            onStopResize : function(e) {
                _1de.options.left = e.data.left;
                _1de.options.top = e.data.top;
                _1de.options.width = e.data.width;
                _1de.options.height = e.data.height;
                _1cc(_1dd);
                _1de.pmask.remove();
                _1de.pmask = null;
                _1de.proxy.remove();
                _1de.proxy = null;
            }
        });

    };

    function _1d8() {
        if (document.compatMode == "BackCompat") {
            return {
                width : Math.max(document.body.scrollWidth, document.body.clientWidth),
                height : Math.max(document.body.scrollHeight, document.body.clientHeight)
            };
        } else {
            return {
                width : Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
                height : Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
            };
        }
    };

    $(window).resize(function() {
        $("body>div.window-mask").css({
            width : $(window).width(),
            height : $(window).height()
        });
        setTimeout(function() {
            $("body>div.window-mask").css({
                width : _1d8().width,
                height : _1d8().height
            });
        }, 50);
    });

    $.fn.window = function(_1df, _1e0) {
        if ( typeof _1df == "string") {
            var _1e1 = $.fn.window.methods[_1df];
            if (_1e1) {
                return _1e1(this, _1e0);
            } else {
                return this.panel(_1df, _1e0);
            }
        }

        _1df = _1df || {};

        return this.each(function() {
            var _1e2 = $.data(this, "window");

            if (_1e2) {
                $.extend(_1e2.options, _1df);
            } else {
                //
                _1e2 = $.data(this, "window", {
                    options : $.extend({}, $.fn.window.defaults, $.fn.window.parseOptions(this), _1df)
                });

                if (!_1e2.options.inline) {
                    $(this).appendTo("body");
                }
            }

            //init the window html,and setPosition
            _1d3(this);

            _1dc(this);

        });
    };

    $.fn.window.methods = {
        options : function(jq) {
            var _1e3 = jq.panel("options");
            var _1e4 = $.data(jq[0], "window").options;
            return $.extend(_1e4, {
                closed : _1e3.closed,
                collapsed : _1e3.collapsed,
                minimized : _1e3.minimized,
                maximized : _1e3.maximized
            });
        },
        window : function(jq) {
            return $.data(jq[0], "window").window;
        },
        resize : function(jq, _1e5) {
            return jq.each(function() {
                _1cc(this, _1e5);
            });
        },
        move : function(jq, _1e6) {
            return jq.each(function() {
                _1cf(this, _1e6);
            });
        }
    };

    $.fn.window.parseOptions = function(_1e7) {
        var t = $(_1e7);
        return $.extend({}, $.fn.panel.parseOptions(_1e7), {
            draggable : (t.attr("draggable") ? t.attr("draggable") == "true" : undefined),
            resizable : (t.attr("resizable") ? t.attr("resizable") == "true" : undefined),
            shadow : (t.attr("shadow") ? t.attr("shadow") == "true" : undefined),
            modal : (t.attr("modal") ? t.attr("modal") == "true" : undefined),
            inline : (t.attr("inline") ? t.attr("inline") == "true" : undefined)
        });
    };

    $.fn.window.defaults = $.extend({}, $.fn.panel.defaults, {
        zIndex : 9000,
        draggable : true,
        resizable : true,
        shadow : true,
        modal : false,
        inline : false,
        title : "New Window",
        collapsible : false,
        minimizable : false,
        maximizable : false,
        closable : true,
        closed : false
    });
})(jQuery);

//-------------------- window end --------------------------

//-----------------------------------tabs begin----------------------------

(function($) {
    //make width
    function _24f(_250) {
        var _251 = $(_250).children("div.tabs-header");
        var _252 = 0;
        $("ul.tabs li", _251).each(function() {
            _252 += $(this).outerWidth(true);
        });
        var _253 = _251.children("div.tabs-wrap").width();
        var _254 = parseInt(_251.find("ul.tabs").css("padding-left"));
        return _252 - _253 + _254;
    };

    //set the header wrap position
    function _255(_256) {
        var opts = $.data(_256, "tabs").options;
        var _257 = $(_256).children("div.tabs-header");
        var tool = _257.children("div.tabs-tool");
        var _258 = _257.children("div.tabs-scroller-left");
        var _259 = _257.children("div.tabs-scroller-right");
        var wrap = _257.children("div.tabs-wrap");
        tool._outerHeight(_257.outerHeight() - (opts.plain ? 2 : 0));

        var _25a = 0;

        $("ul.tabs li", _257).each(function() {
            _25a += $(this).outerWidth(true);
        });

        var _25b = _257.width() - tool.outerWidth();

        if (_25a > _25b) {
            _258.show();
            _259.show();
            //tool.css("right", _259.outerWidth());
            wrap.css({
                marginLeft : _258.outerWidth(),
                marginRight : _259.outerWidth() + tool.outerWidth(),
                //left : 0,
                width : _25b - _258.outerWidth() - _259.outerWidth()
            });
        } else {
            _258.hide();
            _259.hide();
            //tool.css("right", 0);
            wrap.css({
                marginLeft : 0,
                marginRight : tool.outerWidth(),
                //left : 0,
                width : _25b
            });
            //wrap.scrollLeft(0);
        }
    };

    //init tab tool
    function _25c(_25d) {
        var opts = $.data(_25d, "tabs").options;
        var _25e = $(_25d).children("div.tabs-header");
        if (opts.tools) {
            if ( typeof opts.tools == "string") {
                $(opts.tools).addClass("tabs-tool").appendTo(_25e);
                $(opts.tools).show();
            } else {
                _25e.children("div.tabs-tool").remove();
                var _25f = $("<div class=\"tabs-tool\"></div>").appendTo(_25e);
                for (var i = 0; i < opts.tools.length; i++) {
                    var tool = $("<a href=\"javascript:void(0);\"></a>").appendTo(_25f);
                    tool[0].onclick = eval(opts.tools[i].handler ||
                    function() {
                    });
                    tool.linkbutton($.extend({}, opts.tools[i], {
                        plain : true
                    }));
                }
            }
        } else {
            _25e.children("div.tabs-tool").remove();
        }
    };

    // set width
    function _260(_261) {
        var opts = $.data(_261, "tabs").options;

        var cc = $(_261);

        if (opts.fit == true) {
            var p = cc.parent();
            p.addClass("panel-noscroll");
            opts.width = p.width();
            opts.height = p.height();
        }

        cc.width(opts.width).height(opts.height);
        var _262 = $(_261).children("div.tabs-header");
        _262._outerWidth(opts.width);

        //set the header wrap position
        _255(_261);

        var _263 = $(_261).children("div.tabs-panels");
        var _264 = opts.height;

        if (!isNaN(_264)) {
            _263._outerHeight(_264 - _262.outerHeight());
        } else {
            _263.height("auto");
        }
        var _265 = opts.width;

        if (!isNaN(_265)) {
            _263._outerWidth(_265);
        } else {
            _263.width("auto");
        }
    };

    //set size of panel
    function _266(_267) {
        var opts = $.data(_267, "tabs").options;
        var tab = _268(_267);
        if (tab) {
            var _269 = $(_267).children("div.tabs-panels");
            var _26a = opts.width == "auto" ? "auto" : _269.width();
            var _26b = opts.height == "auto" ? "auto" : _269.height();
            tab.panel("resize", {
                width : _26a,
                height : _26b
            });
        }
    };

    //init the div panels
    function _26c(_26d) {
        var cc = $(_26d);
        cc.addClass("tabs-container");
        cc.wrapInner("<div class=\"tabs-panels\"/>");
        $("<div class=\"tabs-header\">" + "<div class=\"tabs-scroller-left\"></div>" + "<div class=\"tabs-scroller-right\"></div>" + "<div class=\"tabs-wrap\">" + "<ul class=\"tabs\"></ul>" + "</div>" + "</div>").prependTo(_26d);
        var tabs = [];
        var tp = cc.children("div.tabs-panels");
        tp.children("div[selected]").attr("toselect", "true");
        tp.children("div").each(function() {
            var pp = $(this);
            tabs.push(pp);

            //init the tab content -- the panel
            _276(_26d, pp);
        });
        cc.children("div.tabs-header").find(".tabs-scroller-left, .tabs-scroller-right").hover(function() {
            $(this).addClass("tabs-scroller-over");
        }, function() {
            $(this).removeClass("tabs-scroller-over");
        });
        cc.bind("_resize", function(e, _26e) {
            var opts = $.data(_26d, "tabs").options;
            if (opts.fit == true || _26e) {
                _260(_26d);
                _266(_26d);
            }
            return false;
        });
        return tabs;
    };

    //bind tab click
    function _26f(_270) {
        var opts = $.data(_270, "tabs").options;
        var _271 = $(_270).children("div.tabs-header");
        var _272 = $(_270).children("div.tabs-panels");

        if (opts.plain == true) {
            _271.addClass("tabs-header-plain");
        } else {
            _271.removeClass("tabs-header-plain");
        }

        if (opts.border == true) {
            _271.removeClass("tabs-header-noborder");
            _272.removeClass("tabs-panels-noborder");
        } else {
            _271.addClass("tabs-header-noborder");
            _272.addClass("tabs-panels-noborder");
        }

        //when click tabs-scroller-left,right ,reset the header wrap position
        /*
         $(".tabs-scroller-left", _271).unbind(".tabs").bind("click.tabs", function() {
         var wrap = $(".tabs-wrap", _271);
         var pos = wrap.scrollLeft() - opts.scrollIncrement;
         wrap.animate({
         scrollLeft : pos
         }, opts.scrollDuration);
         });

         $(".tabs-scroller-right", _271).unbind(".tabs").bind("click.tabs", function() {
         var wrap = $(".tabs-wrap", _271);
         var pos = Math.min(wrap.scrollLeft() + opts.scrollIncrement, _24f(_270));
         wrap.animate({
         scrollLeft : pos
         }, opts.scrollDuration);
         });
         */

        var tabs = $.data(_270, "tabs").tabs;

        for (var i = 0, len = tabs.length; i < len; i++) {
            var _273 = tabs[i];
            var tab = _273.panel("options").tab;

            tab.unbind(".tabs").bind("click.tabs", {
                p : _273
            }, function(e) {
                _281(_270, _275(_270, e.data.p));
            }).bind("contextmenu.tabs", {
                p : _273
            }, function(e) {
                opts.onContextMenu.call(_270, e, e.data.p.panel("options").title);
            });

            tab.find("a.tabs-close").unbind(".tabs").bind("click.tabs", {
                p : _273
            }, function(e) {
                _274(_270, _275(_270, e.data.p));
                return false;
            });
        }
    };

    //init the tab content -- the panel
    function _276(_277, pp, _278) {
        _278 = _278 || {};

        pp.panel($.extend({}, _278, {
            border : false,
            noheader : true,
            //
            closed : true,
            doSize : false,
            iconCls : (_278.icon ? _278.icon : undefined),
            onLoad : function() {
                if (_278.onLoad) {
                    _278.onLoad.call(this, arguments);
                }

                $.data(_277, "tabs").options.onLoad.call(_277, pp);

            }
        }));

        // init the header
        var opts = pp.panel("options");
        var _279 = $(_277).children("div.tabs-header");
        var tabs = $("ul.tabs", _279);
        var tab = $("<li></li>").appendTo(tabs);
        var _27a = $("<a href=\"javascript:void(0)\" class=\"tabs-inner\"></a>").appendTo(tab);
        var _27b = $("<span class=\"tabs-title\"></span>").html(opts.title).appendTo(_27a);
        var _27c = $("<span class=\"tabs-icon\"></span>").appendTo(_27a);
        if (opts.closable) {
            _27b.addClass("tabs-closable");
            $("<a href=\"javascript:void(0)\" class=\"tabs-close\">&nbsp;</a>").appendTo(tab);
        }
        if (opts.iconCls) {
            _27b.addClass("tabs-with-icon");
            _27c.addClass(opts.iconCls);
        }
        if (opts.tools) {
            var _27d = $("<span class=\"tabs-p-tool\"></span>").insertAfter(_27a);
            if ( typeof opts.tools == "string") {
                $(opts.tools).children().appendTo(_27d);
            } else {
                for (var i = 0; i < opts.tools.length; i++) {
                    var t = $("<a href=\"javascript:void(0)\"></a>").appendTo(_27d);
                    t.addClass(opts.tools[i].iconCls);
                    if (opts.tools[i].handler) {
                        t.bind("click", eval(opts.tools[i].handler));
                    }
                }
            }
            var pr = _27d.children().length * 12;
            if (opts.closable) {
                pr += 8;
            } else {
                pr -= 3;
                _27d.css("right", "5px");
            }
            _27b.css("padding-right", pr + "px");
        }
        opts.tab = tab;
    };

    //add tab
    function _27e(_27f, _280) {
        var opts = $.data(_27f, "tabs").options;
        var tabs = $.data(_27f, "tabs").tabs;

        if (_280.selected == undefined) {
            _280.selected = true;
        }
        var pp = $("<div></div>").appendTo($(_27f).children("div.tabs-panels"));
        tabs.push(pp);

        //init the tab panel
        _276(_27f, pp, _280);

        opts.onAdd.call(_27f, _280.title);

        //set the header wrap position
        _255(_27f);

        //bind tab click
        _26f(_27f);

        if (_280.selected) {
            _281(_27f, tabs.length - 1);
        }
    };

    function _282(_283, _284) {
        var _285 = $.data(_283, "tabs").selectHis;
        var pp = _284.tab;
        var _286 = pp.panel("options").title;
        pp.panel($.extend({}, _284.options, {
            iconCls : (_284.options.icon ? _284.options.icon : undefined)
        }));
        var opts = pp.panel("options");
        var tab = opts.tab;
        tab.find("span.tabs-icon").attr("class", "tabs-icon");
        tab.find("a.tabs-close").remove();
        tab.find("span.tabs-title").html(opts.title);
        if (opts.closable) {
            tab.find("span.tabs-title").addClass("tabs-closable");
            $("<a href=\"javascript:void(0)\" class=\"tabs-close\"></a>").appendTo(tab);
        } else {
            tab.find("span.tabs-title").removeClass("tabs-closable");
        }
        if (opts.iconCls) {
            tab.find("span.tabs-title").addClass("tabs-with-icon");
            tab.find("span.tabs-icon").addClass(opts.iconCls);
        } else {
            tab.find("span.tabs-title").removeClass("tabs-with-icon");
        }
        if (_286 != opts.title) {
            for (var i = 0; i < _285.length; i++) {
                if (_285[i] == _286) {
                    _285[i] = opts.title;
                }
            }
        }
        _26f(_283);
        $.data(_283, "tabs").options.onUpdate.call(_283, opts.title);
    };

    //close the specialfy tab by index,equals remove
    function _274(_287, _288) {
        var opts = $.data(_287, "tabs").options;
        var tabs = $.data(_287, "tabs").tabs;
        var _289 = $.data(_287, "tabs").selectHis;
        if (!_28a(_287, _288)) {
            return;
        }

        //get tab by index or title
        var tab = _28b(_287, _288);
        var _28c = tab.panel("options").title;
        if (opts.onBeforeClose.call(_287, _28c) == false) {
            return;
        }
        var tab = _28b(_287, _288, true);

        //
        tab.panel("options").tab.remove();

        //
        tab.panel("destroy");

        opts.onClose.call(_287, _28c);

        //set the header wrap position
        _255(_287);

        for (var i = 0; i < _289.length; i++) {
            if (_289[i] == _28c) {
                _289.splice(i, 1);
                i--;
            }
        }

        var _28d = _289.pop();

        if (_28d) {
            _281(_287, _28d);
        } else {
            if (tabs.length) {
                _281(_287, 0);
            }
        }
    };

    //get tab by index or title
    function _28b(_28e, _28f, _290) {
        var tabs = $.data(_28e, "tabs").tabs;
        if ( typeof _28f == "number") {
            if (_28f < 0 || _28f >= tabs.length) {
                return null;
            } else {
                var tab = tabs[_28f];
                if (_290) {
                    tabs.splice(_28f, 1);
                }
                return tab;
            }
        }

        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.panel("options").title == _28f) {
                if (_290) {
                    tabs.splice(i, 1);
                }
                return tab;
            }
        }
        return null;
    };

    //getTabIndex
    function _275(_291, tab) {
        var tabs = $.data(_291, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i][0] == $(tab)[0]) {
                return i;
            }
        }
        return -1;
    };

    //getSelected Tab
    function _268(_292) {
        var tabs = $.data(_292, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.panel("options").closed == false) {
                return tab;
            }
        }
        return null;
    };

    // set selected tab,and open it
    function _293(_294) {
        var tabs = $.data(_294, "tabs").tabs;
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].attr("toselect") == "true") {
                _281(_294, i);
                return;
            }
        }

        if (tabs.length) {

            //open one tab
            _281(_294, 0);
        }
    };

    //open one tab
    function _281(_295, _296) {
        var opts = $.data(_295, "tabs").options;
        var tabs = $.data(_295, "tabs").tabs;
        var _297 = $.data(_295, "tabs").selectHis;

        if (tabs.length == 0) {
            return;
        }

        //get the tab by index
        var _298 = _28b(_295, _296);

        if (!_298) {
            return;
        }

        //get the selected tab
        var _299 = _268(_295);

        if (_299) {
            _299.panel("close");
            _299.panel("options").tab.removeClass("tabs-selected");
        }

        //
        _298.panel("open");

        var _29a = _298.panel("options").title;
        _297.push(_29a);
        var tab = _298.panel("options").tab;
        tab.addClass("tabs-selected");

        //set the header wrap position
        /*
        var wrap = $(_295).find(">div.tabs-header div.tabs-wrap");

        var _29b = tab.position().left + wrap.scrollLeft();
        var left = _29b - wrap.scrollLeft();
        var _29c = left + tab.outerWidth();

        if (left < 0 || _29c > wrap.innerWidth()) {
        var pos = Math.min(_29b - (wrap.width() - tab.width()) / 2, _24f(_295));
        wrap.animate({
        scrollLeft : pos
        }, opts.scrollDuration);
        } else {
        var pos = Math.min(wrap.scrollLeft(), _24f(_295));
        wrap.animate({
        scrollLeft : pos
        }, opts.scrollDuration);
        }

        */

        //set size of panel
        _266(_295);

        opts.onSelect.call(_295, _29a);
    };

    function _28a(_29d, _29e) {
        return _28b(_29d, _29e) != null;
    };

    $.fn.tabs = function(_29f, _2a0) {
        if ( typeof _29f == "string") {
            return $.fn.tabs.methods[_29f](this, _2a0);
        }

        _29f = _29f || {};
        return this.each(function() {

            var _2a1 = $.data(this, "tabs");
            var opts;
            if (_2a1) {
                opts = $.extend(_2a1.options, _29f);
                _2a1.options = opts;
            } else {
                //
                $.data(this, "tabs", {
                    options : $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), _29f),

                    //init the tab panels
                    tabs : _26c(this),
                    selectHis : []
                });
            }

            //init tab tool
            _25c(this);

            //bind tab click
            _26f(this);

            // set width
            _260(this);

            // set selected tab,and open it
            _293(this);

        });
    };

    $.fn.tabs.methods = {
        options : function(jq) {
            return $.data(jq[0], "tabs").options;
        },
        tabs : function(jq) {
            return $.data(jq[0], "tabs").tabs;
        },
        resize : function(jq) {
            return jq.each(function() {
                _260(this);
                _266(this);
            });
        },
        add : function(jq, _2a2) {
            return jq.each(function() {

                //
                _27e(this, _2a2);
            });
        },
        closeAll : function(jq) {
            return jq.each(function() {
                while (_28a(this, 0)) {
                    _274(this, 0);
                }
            });
        },
        close : function(jq, _2a3) {
            return jq.each(function() {

                //close
                _274(this, _2a3);
            });
        },
        getTab : function(jq, _2a4) {
            return _28b(jq[0], _2a4);
        },

        getTabIndex : function(jq, tab) {
            return _275(jq[0], tab);
        },
        getSelected : function(jq) {
            return _268(jq[0]);
        },
        select : function(jq, _2a5) {
            return jq.each(function() {
                _281(this, _2a5);
            });
        },
        exists : function(jq, _2a6) {
            return _28a(jq[0], _2a6);
        },
        update : function(jq, _2a7) {
            return jq.each(function() {
                _282(this, _2a7);
            });
        }
    };

    $.fn.tabs.parseOptions = function(_2a8) {
        var t = $(_2a8);
        return {
            width : (parseInt(_2a8.style.width) || undefined),
            height : (parseInt(_2a8.style.height) || undefined),
            fit : (t.attr("fit") ? t.attr("fit") == "true" : undefined),
            border : (t.attr("border") ? t.attr("border") == "true" : undefined),
            plain : (t.attr("plain") ? t.attr("plain") == "true" : undefined),
            tools : t.attr("tools")
        };
    };

    $.fn.tabs.defaults = {
        width : "auto",
        height : "auto",
        plain : false,
        fit : false,
        border : true,
        tools : null,
        scrollIncrement : 100,
        scrollDuration : 400,
        onLoad : function(_2a9) {
        },
        onSelect : function(_2aa) {
        },
        onBeforeClose : function(_2ab) {
        },
        onClose : function(_2ac) {
        },
        onAdd : function(_2ad) {
        },
        onUpdate : function(_2ae) {
        },
        onContextMenu : function(e, _2af) {
        }
    };

})(jQuery);

//-----------------------------------tabs end----------------------------

//-----------------------------------layout begin--------------------------
(function($) {
    var _2b0 = false;

    //resize
    function _2b1(_2b2) {
        var opts = $.data(_2b2, "layout").options;
        var _2b3 = $.data(_2b2, "layout").panels;
        var cc = $(_2b2);
        if (opts.fit == true) {
            var p = cc.parent();
            p.addClass("panel-noscroll");
            cc.width(p.width());
            cc.height(p.height());
        }
        var cpos = {
            top : 0,
            left : 0,
            width : cc.width(),
            height : cc.height()
        };
        function _2b4(pp) {
            if (pp.length == 0) {
                return;
            }
            pp.panel("resize", {
                width : cc.width(),
                height : pp.panel("options").height,
                left : 0,
                top : 0
            });
            cpos.top += pp.panel("options").height;
            cpos.height -= pp.panel("options").height;
        };
        if (_2b8(_2b3.expandNorth)) {
            _2b4(_2b3.expandNorth);
        } else {
            _2b4(_2b3.north);
        }
        function _2b5(pp) {
            if (pp.length == 0) {
                return;
            }
            pp.panel("resize", {
                width : cc.width(),
                height : pp.panel("options").height,
                left : 0,
                top : cc.height() - pp.panel("options").height
            });
            cpos.height -= pp.panel("options").height;
        };
        if (_2b8(_2b3.expandSouth)) {
            _2b5(_2b3.expandSouth);
        } else {
            _2b5(_2b3.south);
        }
        function _2b6(pp) {
            if (pp.length == 0) {
                return;
            }
            pp.panel("resize", {
                width : pp.panel("options").width,
                height : cpos.height,
                left : cc.width() - pp.panel("options").width,
                top : cpos.top
            });
            cpos.width -= pp.panel("options").width;
        };
        if (_2b8(_2b3.expandEast)) {
            _2b6(_2b3.expandEast);
        } else {
            _2b6(_2b3.east);
        }
        function _2b7(pp) {
            if (pp.length == 0) {
                return;
            }
            pp.panel("resize", {
                width : pp.panel("options").width,
                height : cpos.height,
                left : 0,
                top : cpos.top
            });
            cpos.left += pp.panel("options").width;
            cpos.width -= pp.panel("options").width;
        };
        if (_2b8(_2b3.expandWest)) {
            _2b7(_2b3.expandWest);
        } else {
            _2b7(_2b3.west);
        }
        _2b3.center.panel("resize", cpos);
    };

    function init(_2b9) {
        var cc = $(_2b9);

        if (cc[0].tagName == "BODY") {
            $("html").css({
                height : "100%",
                overflow : "hidden"
            });
            $("body").css({
                height : "100%",
                overflow : "hidden",
                border : "none"
            });
        }

        cc.addClass("layout");
        cc.css({
            margin : 0,
            padding : 0
        });
        $("<div class=\"layout-split-proxy-h\"></div>").appendTo(cc);
        $("<div class=\"layout-split-proxy-v\"></div>").appendTo(cc);

        cc.children("div[region]").each(function() {
            var _2ba = $(this).attr("region");

            //---init one region
            _2bc(_2b9, {
                region : _2ba
            });
        });

        cc.bind("_resize", function(e, _2bb) {
            var opts = $.data(_2b9, "layout").options;
            if (opts.fit == true || _2bb) {
                //resize
                _2b1(_2b9);
            }
            return false;
        });
    };

    //---init one region
    function _2bc(_2bd, _2be) {
        _2be.region = _2be.region || "center";
        var _2bf = $.data(_2bd, "layout").panels;
        var cc = $(_2bd);
        var dir = _2be.region;

        if (_2bf[dir].length) {
            return;
        }

        var pp = cc.children("div[region=" + dir + "]");
        if (!pp.length) {
            pp = $("<div></div>").appendTo(cc);
        }

        //-----------------------------
        pp.panel($.extend({}, {
            width : (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
            height : (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
            split : (pp.attr("split") ? pp.attr("split") == "true" : undefined),
            doSize : false,
            cls : ("layout-panel layout-panel-" + dir),
            bodyCls : "layout-body",
            onOpen : function() {
                var _2c0 = {
                    north : "up",
                    south : "down",
                    east : "right",
                    west : "left"
                };
                if (!_2c0[dir]) {
                    return;
                }
                var _2c1 = "layout-button-" + _2c0[dir];
                var tool = $(this).panel("header").children("div.panel-tool");
                if (!tool.children("a." + _2c1).length) {
                    var t = $("<a href=\"javascript:void(0)\"></a>").addClass(_2c1).appendTo(tool);
                    t.bind("click", {
                        dir : dir
                    }, function(e) {
                        _2cd(_2bd, e.data.dir);
                        return false;
                    });
                }
            }
        }, _2be));

        _2bf[dir] = pp;

        if (pp.panel("options").split) {
            var _2c2 = pp.panel("panel");
            _2c2.addClass("layout-split-" + dir);
            var _2c3 = "";
            if (dir == "north") {
                _2c3 = "s";
            }
            if (dir == "south") {
                _2c3 = "n";
            }
            if (dir == "east") {
                _2c3 = "w";
            }
            if (dir == "west") {
                _2c3 = "e";
            }

            //-------------
            _2c2.resizable({
                handles : _2c3,
                onStartResize : function(e) {
                    _2b0 = true;
                    if (dir == "north" || dir == "south") {
                        var _2c4 = $(">div.layout-split-proxy-v", _2bd);
                    } else {
                        var _2c4 = $(">div.layout-split-proxy-h", _2bd);
                    }
                    var top = 0, left = 0, _2c5 = 0, _2c6 = 0;
                    var pos = {
                        display : "block"
                    };
                    if (dir == "north") {
                        pos.top = parseInt(_2c2.css("top")) + _2c2.outerHeight() - _2c4.height();
                        pos.left = parseInt(_2c2.css("left"));
                        pos.width = _2c2.outerWidth();
                        pos.height = _2c4.height();
                    } else {
                        if (dir == "south") {
                            pos.top = parseInt(_2c2.css("top"));
                            pos.left = parseInt(_2c2.css("left"));
                            pos.width = _2c2.outerWidth();
                            pos.height = _2c4.height();
                        } else {
                            if (dir == "east") {
                                pos.top = parseInt(_2c2.css("top")) || 0;
                                pos.left = parseInt(_2c2.css("left")) || 0;
                                pos.width = _2c4.width();
                                pos.height = _2c2.outerHeight();
                            } else {
                                if (dir == "west") {
                                    pos.top = parseInt(_2c2.css("top")) || 0;
                                    pos.left = _2c2.outerWidth() - _2c4.width();
                                    pos.width = _2c4.width();
                                    pos.height = _2c2.outerHeight();
                                }
                            }
                        }
                    }
                    _2c4.css(pos);
                    $("<div class=\"layout-mask\"></div>").css({
                        left : 0,
                        top : 0,
                        width : cc.width(),
                        height : cc.height()
                    }).appendTo(cc);
                },
                onResize : function(e) {
                    if (dir == "north" || dir == "south") {
                        var _2c7 = $(">div.layout-split-proxy-v", _2bd);
                        _2c7.css("top", e.pageY - $(_2bd).offset().top - _2c7.height() / 2);
                    } else {
                        var _2c7 = $(">div.layout-split-proxy-h", _2bd);
                        _2c7.css("left", e.pageX - $(_2bd).offset().left - _2c7.width() / 2);
                    }
                    return false;
                },
                onStopResize : function() {
                    $(">div.layout-split-proxy-v", _2bd).css("display", "none");
                    $(">div.layout-split-proxy-h", _2bd).css("display", "none");
                    var opts = pp.panel("options");
                    opts.width = _2c2.outerWidth();
                    opts.height = _2c2.outerHeight();
                    opts.left = _2c2.css("left");
                    opts.top = _2c2.css("top");
                    pp.panel("resize");
                    _2b1(_2bd);
                    _2b0 = false;
                    cc.find(">div.layout-mask").remove();
                }
            });
        }
    };

    function _2c8(_2c9, _2ca) {
        var _2cb = $.data(_2c9, "layout").panels;
        if (_2cb[_2ca].length) {
            _2cb[_2ca].panel("destroy");
            _2cb[_2ca] = $();
            var _2cc = "expand" + _2ca.substring(0, 1).toUpperCase() + _2ca.substring(1);
            if (_2cb[_2cc]) {
                _2cb[_2cc].panel("destroy");
                _2cb[_2cc] = undefined;
            }
        }
    };

    function _2cd(_2ce, _2cf, _2d0) {
        if (_2d0 == undefined) {
            _2d0 = "normal";
        }
        var _2d1 = $.data(_2ce, "layout").panels;
        var p = _2d1[_2cf];
        if (p.panel("options").onBeforeCollapse.call(p) == false) {
            return;
        }
        var _2d2 = "expand" + _2cf.substring(0, 1).toUpperCase() + _2cf.substring(1);
        if (!_2d1[_2d2]) {
            _2d1[_2d2] = _2d3(_2cf);
            _2d1[_2d2].panel("panel").click(function() {
                var _2d4 = _2d5();
                p.panel("expand", false).panel("open").panel("resize", _2d4.collapse);
                p.panel("panel").animate(_2d4.expand);
                return false;
            });
        }
        var _2d6 = _2d5();
        if (!_2b8(_2d1[_2d2])) {
            _2d1.center.panel("resize", _2d6.resizeC);
        }
        p.panel("panel").animate(_2d6.collapse, _2d0, function() {
            p.panel("collapse", false).panel("close");
            _2d1[_2d2].panel("open").panel("resize", _2d6.expandP);
        });
        function _2d3(dir) {
            var icon;
            if (dir == "east") {
                icon = "layout-button-left";
            } else {
                if (dir == "west") {
                    icon = "layout-button-right";
                } else {
                    if (dir == "north") {
                        icon = "layout-button-down";
                    } else {
                        if (dir == "south") {
                            icon = "layout-button-up";
                        }
                    }
                }
            }
            var p = $("<div></div>").appendTo(_2ce).panel({
                cls : "layout-expand",
                title : "&nbsp;",
                closed : true,
                doSize : false,
                tools : [{
                    iconCls : icon,
                    handler : function() {
                        _2d7(_2ce, _2cf);
                        return false;
                    }
                }]
            });
            p.panel("panel").hover(function() {
                $(this).addClass("layout-expand-over");
            }, function() {
                $(this).removeClass("layout-expand-over");
            });
            return p;
        };
        function _2d5() {
            var cc = $(_2ce);
            if (_2cf == "east") {
                return {
                    resizeC : {
                        width : _2d1.center.panel("options").width + _2d1["east"].panel("options").width - 28
                    },
                    expand : {
                        left : cc.width() - _2d1["east"].panel("options").width
                    },
                    expandP : {
                        top : _2d1["east"].panel("options").top,
                        left : cc.width() - 28,
                        width : 28,
                        height : _2d1["center"].panel("options").height
                    },
                    collapse : {
                        left : cc.width()
                    }
                };
            } else {
                if (_2cf == "west") {
                    return {
                        resizeC : {
                            width : _2d1.center.panel("options").width + _2d1["west"].panel("options").width - 28,
                            left : 28
                        },
                        expand : {
                            left : 0
                        },
                        expandP : {
                            left : 0,
                            top : _2d1["west"].panel("options").top,
                            width : 28,
                            height : _2d1["center"].panel("options").height
                        },
                        collapse : {
                            left : -_2d1["west"].panel("options").width
                        }
                    };
                } else {
                    if (_2cf == "north") {
                        var hh = cc.height() - 28;
                        if (_2b8(_2d1.expandSouth)) {
                            hh -= _2d1.expandSouth.panel("options").height;
                        } else {
                            if (_2b8(_2d1.south)) {
                                hh -= _2d1.south.panel("options").height;
                            }
                        }
                        _2d1.east.panel("resize", {
                            top : 28,
                            height : hh
                        });
                        _2d1.west.panel("resize", {
                            top : 28,
                            height : hh
                        });
                        if (_2b8(_2d1.expandEast)) {
                            _2d1.expandEast.panel("resize", {
                                top : 28,
                                height : hh
                            });
                        }
                        if (_2b8(_2d1.expandWest)) {
                            _2d1.expandWest.panel("resize", {
                                top : 28,
                                height : hh
                            });
                        }
                        return {
                            resizeC : {
                                top : 28,
                                height : hh
                            },
                            expand : {
                                top : 0
                            },
                            expandP : {
                                top : 0,
                                left : 0,
                                width : cc.width(),
                                height : 28
                            },
                            collapse : {
                                top : -_2d1["north"].panel("options").height
                            }
                        };
                    } else {
                        if (_2cf == "south") {
                            var hh = cc.height() - 28;
                            if (_2b8(_2d1.expandNorth)) {
                                hh -= _2d1.expandNorth.panel("options").height;
                            } else {
                                if (_2b8(_2d1.north)) {
                                    hh -= _2d1.north.panel("options").height;
                                }
                            }
                            _2d1.east.panel("resize", {
                                height : hh
                            });
                            _2d1.west.panel("resize", {
                                height : hh
                            });
                            if (_2b8(_2d1.expandEast)) {
                                _2d1.expandEast.panel("resize", {
                                    height : hh
                                });
                            }
                            if (_2b8(_2d1.expandWest)) {
                                _2d1.expandWest.panel("resize", {
                                    height : hh
                                });
                            }
                            return {
                                resizeC : {
                                    height : hh
                                },
                                expand : {
                                    top : cc.height() - _2d1["south"].panel("options").height
                                },
                                expandP : {
                                    top : cc.height() - 28,
                                    left : 0,
                                    width : cc.width(),
                                    height : 28
                                },
                                collapse : {
                                    top : cc.height()
                                }
                            };
                        }
                    }
                }
            }
        };
    };

    function _2d7(_2d8, _2d9) {
        var _2da = $.data(_2d8, "layout").panels;
        var _2db = _2dc();
        var p = _2da[_2d9];
        if (p.panel("options").onBeforeExpand.call(p) == false) {
            return;
        }
        var _2dd = "expand" + _2d9.substring(0, 1).toUpperCase() + _2d9.substring(1);
        _2da[_2dd].panel("close");
        p.panel("panel").stop(true, true);
        p.panel("expand", false).panel("open").panel("resize", _2db.collapse);
        p.panel("panel").animate(_2db.expand, function() {
            _2b1(_2d8);
        });
        function _2dc() {
            var cc = $(_2d8);
            if (_2d9 == "east" && _2da.expandEast) {
                return {
                    collapse : {
                        left : cc.width()
                    },
                    expand : {
                        left : cc.width() - _2da["east"].panel("options").width
                    }
                };
            } else {
                if (_2d9 == "west" && _2da.expandWest) {
                    return {
                        collapse : {
                            left : -_2da["west"].panel("options").width
                        },
                        expand : {
                            left : 0
                        }
                    };
                } else {
                    if (_2d9 == "north" && _2da.expandNorth) {
                        return {
                            collapse : {
                                top : -_2da["north"].panel("options").height
                            },
                            expand : {
                                top : 0
                            }
                        };
                    } else {
                        if (_2d9 == "south" && _2da.expandSouth) {
                            return {
                                collapse : {
                                    top : cc.height()
                                },
                                expand : {
                                    top : cc.height() - _2da["south"].panel("options").height
                                }
                            };
                        }
                    }
                }
            }
        };
    };

    function _2de(_2df) {
        var _2e0 = $.data(_2df, "layout").panels;
        var cc = $(_2df);
        if (_2e0.east.length) {
            _2e0.east.panel("panel").bind("mouseover", "east", _2e1);
        }
        if (_2e0.west.length) {
            _2e0.west.panel("panel").bind("mouseover", "west", _2e1);
        }
        if (_2e0.north.length) {
            _2e0.north.panel("panel").bind("mouseover", "north", _2e1);
        }
        if (_2e0.south.length) {
            _2e0.south.panel("panel").bind("mouseover", "south", _2e1);
        }
        _2e0.center.panel("panel").bind("mouseover", "center", _2e1);
        function _2e1(e) {
            if (_2b0 == true) {
                return;
            }
            if (e.data != "east" && _2b8(_2e0.east) && _2b8(_2e0.expandEast)) {
                _2cd(_2df, "east");
            }
            if (e.data != "west" && _2b8(_2e0.west) && _2b8(_2e0.expandWest)) {
                _2cd(_2df, "west");
            }
            if (e.data != "north" && _2b8(_2e0.north) && _2b8(_2e0.expandNorth)) {
                _2cd(_2df, "north");
            }
            if (e.data != "south" && _2b8(_2e0.south) && _2b8(_2e0.expandSouth)) {
                _2cd(_2df, "south");
            }
            return false;
        };
    };

    function _2b8(pp) {
        if (!pp) {
            return false;
        }
        if (pp.length) {
            return pp.panel("panel").is(":visible");
        } else {
            return false;
        }
    };

    function _2e2(_2e3) {
        var _2e4 = $.data(_2e3, "layout").panels;
        if (_2e4.east.length && _2e4.east.panel("options").collapsed) {
            _2cd(_2e3, "east", 0);
        }
        if (_2e4.west.length && _2e4.west.panel("options").collapsed) {
            _2cd(_2e3, "west", 0);
        }
        if (_2e4.north.length && _2e4.north.panel("options").collapsed) {
            _2cd(_2e3, "north", 0);
        }
        if (_2e4.south.length && _2e4.south.panel("options").collapsed) {
            _2cd(_2e3, "south", 0);
        }
    };

    $.fn.layout = function(_2e5, _2e6) {
        if ( typeof _2e5 == "string") {
            return $.fn.layout.methods[_2e5](this, _2e6);
        }

        return this.each(function() {
            var _2e7 = $.data(this, "layout");
            if (!_2e7) {
                var opts = $.extend({}, {
                    fit : $(this).attr("fit") == "true"
                });

                $.data(this, "layout", {
                    options : opts,
                    panels : {
                        center : $(),
                        north : $(),
                        south : $(),
                        east : $(),
                        west : $()
                    }
                });

                //
                init(this);

                _2de(this);
            }

            _2b1(this);

            _2e2(this);
        });
    };

    $.fn.layout.methods = {
        resize : function(jq) {
            return jq.each(function() {
                _2b1(this);
            });
        },
        panel : function(jq, _2e8) {
            return $.data(jq[0],"layout").panels[_2e8];
        },
        collapse : function(jq, _2e9) {
            return jq.each(function() {
                _2cd(this, _2e9);
            });
        },
        expand : function(jq, _2ea) {
            return jq.each(function() {
                _2d7(this, _2ea);
            });
        },
        add : function(jq, _2eb) {
            return jq.each(function() {
                _2bc(this, _2eb);
                _2b1(this);
                if ($(this).layout("panel", _2eb.region).panel("options").collapsed) {
                    _2cd(this, _2eb.region, 0);
                }
            });
        },
        remove : function(jq, _2ec) {
            return jq.each(function() {
                _2c8(this, _2ec);
                _2b1(this);
            });
        }
    };

})(jQuery);
//-----------------------------------layout end--------------------------

//---------------------validatebox start
(function($) {
    function init(_34b) {
        $(_34b).addClass("validatebox-text");
    };
    function _34c(_34d) {
        var _34e = $.data(_34d, "validatebox");
        _34e.validating = false;
        var tip = _34e.tip;
        if (tip) {
            tip.remove();
        }
        $(_34d).unbind();
        $(_34d).remove();
    };
    function _34f(_350) {
        var box = $(_350);
        var _351 = $.data(_350, "validatebox");
        _351.validating = false;
        box.unbind(".validatebox").bind("focus.validatebox", function() {
            _351.validating = true;
            _351.value = undefined;
            (function() {
                if (_351.validating) {
                    if (_351.value != box.val()) {
                        _351.value = box.val();
                        _356(_350);
                    }
                    setTimeout(arguments.callee, 200);
                }
            })();
        }).bind("blur.validatebox", function() {
            _351.validating = false;
            _352(_350);
        }).bind("mouseenter.validatebox", function() {
            if (box.hasClass("validatebox-invalid")) {
                _353(_350);
            }
        }).bind("mouseleave.validatebox", function() {
            _352(_350);
        });
    };
    function _353(_354) {
        var box = $(_354);
        var msg = $.data(_354, "validatebox").message;
        var tip = $.data(_354, "validatebox").tip;
        if (!tip) {
            tip = $("<div class=\"validatebox-tip\">" + "<span class=\"validatebox-tip-content\">" + "</span>" + "<span class=\"validatebox-tip-pointer\">" + "</span>" + "</div>").appendTo("body");
            $.data(_354, "validatebox").tip = tip;
        }
        tip.find(".validatebox-tip-content").html(msg);
        tip.css({
            display : "block",
            left : box.offset().left + box.outerWidth(),
            top : box.offset().top
        });
    };
    function _352(_355) {
        var tip = $.data(_355, "validatebox").tip;
        if (tip) {
            tip.remove();
            $.data(_355, "validatebox").tip = null;
        }
    };
    function _356(_357) {
        var opts = $.data(_357, "validatebox").options;
        var tip = $.data(_357, "validatebox").tip;
        var box = $(_357);
        var _358 = box.val();
        function _359(msg) {
            $.data(_357, "validatebox").message = msg;
        };
        var _35a = box.attr("disabled");
        if (_35a == true || _35a == "true") {
            return true;
        }
        if (opts.required) {
            if (_358 == "") {
                box.addClass("validatebox-invalid");
                _359(opts.missingMessage);
                _353(_357);
                return false;
            }
        }
        if (opts.validType) {
            var _35b = /([a-zA-Z_]+)(.*)/.exec(opts.validType);
            var rule = opts.rules[_35b[1]];
            if (_358 && rule) {
                var _35c = eval(_35b[2]);
                if (!rule["validator"](_358, _35c)) {
                    box.addClass("validatebox-invalid");
                    var _35d = rule["message"];
                    if (_35c) {
                        for (var i = 0; i < _35c.length; i++) {
                            _35d = _35d.replace(new RegExp("\\{" + i + "\\}", "g"), _35c[i]);
                        }
                    }
                    _359(opts.invalidMessage || _35d);
                    _353(_357);
                    return false;
                }
            }
        }
        box.removeClass("validatebox-invalid");
        _352(_357);
        return true;
    };
    $.fn.validatebox = function(_35e, _35f) {
        if ( typeof _35e == "string") {
            return $.fn.validatebox.methods[_35e](this, _35f);
        }
        _35e = _35e || {};
        return this.each(function() {
            var _360 = $.data(this, "validatebox");
            if (_360) {
                $.extend(_360.options, _35e);
            } else {
                init(this);
                $.data(this, "validatebox", {
                    options : $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), _35e)
                });
            }
            _34f(this);
        });
    };
    $.fn.validatebox.methods = {
        destroy : function(jq) {
            return jq.each(function() {
                _34c(this);
            });
        },
        validate : function(jq) {
            return jq.each(function() {
                _356(this);
            });
        },
        isValid : function(jq) {
            return _356(jq[0]);
        }
    };
    $.fn.validatebox.parseOptions = function(_361) {
        var t = $(_361);
        return {
            required : (t.attr("required") ? (t.attr("required") == "required" || t.attr("required") == "true" || t.attr("required") == true) : undefined),
            validType : (t.attr("validType") || undefined),
            missingMessage : (t.attr("missingMessage") || undefined),
            invalidMessage : (t.attr("invalidMessage") || undefined)
        };
    };
    $.fn.validatebox.defaults = {
        required : false,
        validType : null,
        missingMessage : "This field is required.",
        invalidMessage : null,
        rules : {
            email : {
                validator : function(_362) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(_362);
                },
                message : "Please enter a valid email address."
            },
            url : {
                validator : function(_363) {
                    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(_363);
                },
                message : "Please enter a valid URL."
            },
            length : {
                validator : function(_364, _365) {
                    var len = $.trim(_364).length;
                    return len >= _365[0] && len <= _365[1];
                },
                message : "Please enter a value between {0} and {1}."
            },
            remote : {
                validator : function(_366, _367) {
                    var data = {};
                    data[_367[1]] = _366;
                    var _368 = $.ajax({
                        url : _367[0],
                        dataType : "json",
                        data : data,
                        async : false,
                        cache : false,
                        type : "post"
                    }).responseText;
                    return _368 == "true";
                },
                message : "Please fix this field."
            }
        }
    };
})(jQuery);

//---------------------validatebox end

//-------------------combo start-------------------

(function($) {

    //set the panel,shadow size
    function _698(_699, _69a) {
        var opts = $.data(_699, "combo").options;
        var _69b = $.data(_699, "combo").combo;
        var _69c = $.data(_699, "combo").panel;
        var combo_shadow = $.data(_699, "combo").shadow;

        if (_69a) {
            opts.width = _69a;
        }
        _69b.appendTo("body");
        if (isNaN(opts.width)) {
            opts.width = _69b.find("input.combo-text").outerWidth();
        }
        var _69d = 0;
        if (opts.hasDownArrow) {
            _69d = _69b.find(".combo-arrow").outerWidth();
        }
        _69b._outerWidth(opts.width);
        _69b.find("input.combo-text").width(_69b.width() - _69d);

        // set the panel size
        _69c.panel("resize", {
            width : (opts.panelWidth ? opts.panelWidth : _69b.outerWidth()),
            height : opts.panelHeight
        });

        // set the shadow size
        combo_shadow.css({
            width : (opts.panelWidth ? opts.panelWidth : _69b.outerWidth()),
            height : opts.panelHeight
        });

        _69b.insertAfter(_699);
    };

    //process the arrow show or not
    function _69e(_69f) {
        var opts = $.data(_69f, "combo").options;
        var _6a0 = $.data(_69f, "combo").combo;
        if (opts.hasDownArrow) {
            _6a0.find(".combo-arrow").show();
        } else {
            _6a0.find(".combo-arrow").hide();
        }
    };

    //init the input text html and make the select panel
    function init(_6a1) {
        $(_6a1).addClass("combo-f").hide();

        //init the input text html
        var span = $("<span class=\"combo\"></span>").insertAfter(_6a1);
        var _6a2 = $("<input type=\"text\" class=\"combo-text\">").appendTo(span);
        $("<span><span class=\"combo-arrow\"></span></span>").appendTo(span);
        $("<input type=\"hidden\" class=\"combo-value\">").appendTo(span);

        //create the panel,in the combo span
        var _6a3 = $("<div class=\"combo-panel\"></div>").appendTo(span);

        //create the combo shadow,in the combo span
        var combo_shadow = $("<div class=\"window-shadow\"><iframe style = \"width:100%;height:100%;\"></iframe></div>").appendTo(span);

        //hide the shadow
        combo_shadow.hide();

        //build panel
        _6a3.panel({
            doSize : false,
            closed : true,
            style : {
                position : "absolute",
                zIndex : 10
            },
            onOpen : function() {
                $(this).panel("resize");
            }
        });

        var name = $(_6a1).attr("name");
        if (name) {
            span.find("input.combo-value").attr("name", name);
            $(_6a1).removeAttr("name").attr("comboName", name);
        }
        _6a2.attr("autocomplete", "off");

        return {
            combo : span,
            panel : _6a3,
            shadow : combo_shadow
        };
    };

    function _6a4(_6a5) {
        var _6a6 = $.data(_6a5, "combo").combo.find("input.combo-text");
        _6a6.validatebox("destroy");
        $.data(_6a5, "combo").panel.panel("destroy");
        $.data(_6a5, "combo").combo.remove();
        $(_6a5).remove();
    };

    //bind event with hide shadow
    function _6a7(_6a8) {
        
        var _6a9 = $.data(_6a8, "combo");
        var opts = _6a9.options;
        var _6aa = $.data(_6a8, "combo").combo;
        var _6ab = $.data(_6a8, "combo").panel;
        var combo_shadow = $.data(_6a8, "combo").shadow;
        var _6ac = _6aa.find(".combo-text");
        var _6ad = _6aa.find(".combo-arrow");

        //1. unbind all .combo
        //don't use panel,but use the combo span,only process own form's element
        _6aa.parents(".panel-body").first().unbind(".combo");
        
        _6aa.unbind(".combo");
        _6ab.unbind(".combo");
        _6ac.unbind(".combo");
        _6ad.unbind(".combo");
        
        //the arrow
        _6ad.bind("mousedown.combo", function(evt) {
            
            //must stop bubble
            var e = (evt) ? evt : window.event;
            if (window.event) {
                e.cancelBubble = true;
            } else {
                e.stopPropagation();
            }
            
            if (!_6ab.is(":visible")) 
            {
                $("div.combo-panel").panel("close");
                //first init the combo,and then user click the combo by mouse
                _6ae(_6a8);
            }
            _6ac.focus();
            
            return false;
        });
        
        //the input text
        _6ac.bind("mousedown.combo", function(evt) {
            
            //must stop bubble
            var e = (evt) ? evt : window.event;
            if (window.event) {
                e.cancelBubble = true;
            } else {
                e.stopPropagation();
            }
            
            if (!_6ab.is(":visible")) 
            {
                $("div.combo-panel").panel("close");
                //first init the combo,and then user click the combo by mouse
                _6ae(_6a8);
            }
            _6ac.focus();
            
            return false;
            
        });
        
        //click outside the combo,call onHidePanel
        _6aa.parents(".panel-body").first().bind("mousedown.combo", function(evt) {

           //must stop bubble
            var e = (evt) ? evt : window.event;
            if (window.event) {
                e.cancelBubble = true;
            } else {
                e.stopPropagation();
            }

            //click within the combo,do not close, else close
            var thePanel = $(e.srcElement).parents("span.combo");
            
            if (thePanel == null || thePanel == undefined || thePanel.length < 1) {
                
                //call the onHidePanel
                if(opts.onHidePanel)
                {
                    opts.onHidePanel.call(_6a8);
                }
                //$(_6a8).combo("hidePanel");
                $("div.combo-panel").panel("close");

                //hide combo shadow
                combo_shadow.hide();
            }
        });
        
    };

    //open panel
    //set the combo panel position and position
    function _6ae(_6af) {
        var opts = $.data(_6af, "combo").options;
        var _6b0 = $.data(_6af, "combo").combo;
        var _6b1 = $.data(_6af, "combo").panel;
        var combo_shadow = $.data(_6af, "combo").shadow;

        //set the panel,shadow z-index
        if ($.fn.window) {
            _6b1.panel("panel").css("z-index", $.fn.window.defaults.zIndex++);
            combo_shadow.css("z-index", _6b1.panel("panel").css("z-index") - 1);
        }

        //set the panel position
        _6b1.panel("move", {
            left : 0,//_6b0.offset().left,
            top : 18//_6b2()
        });

        //set the shadow position
        combo_shadow.css({
            left : 0,//_6b0.offset().left,
            top : 18//_6b2()
        });

        //open panel
        _6b1.panel("open");

        //open shadow
        combo_shadow.show();

        opts.onShowPanel.call(_6af);

        (function() {
            if (_6b1.is(":visible")) {
                _6b1.panel("move", {
                    left : 0,//_6b3(),
                    top : 18//_6b2()
                });
                setTimeout(arguments.callee, 200);
            }
        })();

        //getLeft
        function _6b3() {
            var left = _6b0.offset().left;
            if (left + _6b1.outerWidth() > $(window).width() + $(document).scrollLeft()) {
                left = $(window).width() + $(document).scrollLeft() - _6b1.outerWidth();
            }
            if (left < 0) {
                left = 0;
            }
            return left;
        };

        //getTop
        function _6b2() {
            var top = _6b0.offset().top + _6b0.outerHeight();
            if (top + _6b1.outerHeight() > $(window).height() + $(document).scrollTop()) {
                top = _6b0.offset().top - _6b1.outerHeight();
            }
            if (top < $(document).scrollTop()) {
                top = _6b0.offset().top + _6b0.outerHeight();
            }
            return top;
        };
    };

    function _6b4(_6b5) {
        var opts = $.data(_6b5, "combo").options;
        var _6b6 = $.data(_6b5, "combo").panel;
        
        opts.onHidePanel.call(_6b5);
        
        _6b6.panel("close");
    };

    function _6b7(_6b8, doit) {
        var opts = $.data(_6b8, "combo").options;
        var _6b9 = $.data(_6b8, "combo").combo.find("input.combo-text");
        _6b9.validatebox(opts);
        if (doit) {
            _6b9.validatebox("validate");
            _6b9.trigger("mouseleave");
        }
    };
    function _6ba(_6bb, _6bc) {
        var opts = $.data(_6bb, "combo").options;
        var _6bd = $.data(_6bb, "combo").combo;
        if (_6bc) {
            opts.disabled = true;
            $(_6bb).attr("disabled", true);
            _6bd.find(".combo-value").attr("disabled", true);
            _6bd.find(".combo-text").attr("disabled", true);
        } else {
            opts.disabled = false;
            $(_6bb).removeAttr("disabled");
            _6bd.find(".combo-value").removeAttr("disabled");
            _6bd.find(".combo-text").removeAttr("disabled");
        }
    };

    function _6be(_6bf) {
        var opts = $.data(_6bf, "combo").options;
        var _6c0 = $.data(_6bf, "combo").combo;
        if (opts.multiple) {
            _6c0.find("input.combo-value").remove();
        } else {
            _6c0.find("input.combo-value").val("");
        }
        _6c0.find("input.combo-text").val("");
    };

    function _6c1(_6c2) {
        var _6c3 = $.data(_6c2, "combo").combo;
        return _6c3.find("input.combo-text").val();
    };

    function _6c4(_6c5, text) {
        var _6c6 = $.data(_6c5, "combo").combo;
        _6c6.find("input.combo-text").val(text);
        _6b7(_6c5, true);
        $.data(_6c5, "combo").previousValue = text;
    };

    function _6c7(_6c8) {
        var _6c9 = [];
        var _6ca = $.data(_6c8, "combo").combo;
        _6ca.find("input.combo-value").each(function() {
            _6c9.push($(this).val());
        });
        return _6c9;
    };

    function _6cb(_6cc, _6cd) {
        var opts = $.data(_6cc, "combo").options;
        var _6ce = _6c7(_6cc);
        var _6cf = $.data(_6cc, "combo").combo;
        _6cf.find("input.combo-value").remove();
        var name = $(_6cc).attr("comboName");
        for (var i = 0; i < _6cd.length; i++) {
            var _6d0 = $("<input type=\"hidden\" class=\"combo-value\">").appendTo(_6cf);
            if (name) {
                _6d0.attr("name", name);
            }
            _6d0.val(_6cd[i]);
        }
        var tmp = [];
        for (var i = 0; i < _6ce.length; i++) {
            tmp[i] = _6ce[i];
        }
        var aa = [];
        for (var i = 0; i < _6cd.length; i++) {
            for (var j = 0; j < tmp.length; j++) {
                if (_6cd[i] == tmp[j]) {
                    aa.push(_6cd[i]);
                    tmp.splice(j, 1);
                    break;
                }
            }
        }
        if (aa.length != _6cd.length || _6cd.length != _6ce.length) {
            if (opts.multiple) {
                opts.onChange.call(_6cc, _6cd, _6ce);
            } else {
                opts.onChange.call(_6cc, _6cd[0], _6ce[0]);
            }
        }
    };

    function _6d1(_6d2) {
        var _6d3 = _6c7(_6d2);
        return _6d3[0];
    };

    function _6d4(_6d5, _6d6) {
        _6cb(_6d5, [_6d6]);
    };

    function _6d7(_6d8) {
        var opts = $.data(_6d8, "combo").options;
        var fn = opts.onChange;
        opts.onChange = function() {
        };
        if (opts.multiple) {
            if (opts.value) {
                if ( typeof opts.value == "object") {
                    _6cb(_6d8, opts.value);
                } else {
                    _6d4(_6d8, opts.value);
                }
            } else {
                _6cb(_6d8, []);
            }
        } else {
            _6d4(_6d8, opts.value);
        }
        opts.onChange = fn;
    };

    $.fn.combo = function(_6d9, _6da) {
        if ( typeof _6d9 == "string") {
            return $.fn.combo.methods[_6d9](this, _6da);
        }

        _6d9 = _6d9 || {};

        return this.each(function() {
            var _6db = $.data(this, "combo");
            if (_6db) {
                $.extend(_6db.options, _6d9);
            } else {

                //init the input text html and make the select panel,do not set the position but set the attribute:position:absulte,z-index:10
                var r = init(this);

                _6db = $.data(this, "combo", {
                    options : $.extend({}, $.fn.combo.defaults, $.fn.combo.parseOptions(this), _6d9),
                    combo : r.combo,
                    panel : r.panel,

                    //--register shadow--
                    shadow : r.shadow,
                    previousValue : null
                });
                $(this).removeAttr("disabled");
            }

            $("input.combo-text", _6db.combo).attr("readonly", !_6db.options.editable);

            //process the arrow show ro hide
            _69e(this);

            //enable or disable the combox-text,combox-value
            _6ba(this, _6db.options.disabled);

            //set the panel,shadow size
            _698(this);

            //bind event with hide shadow
            _6a7(this);

            //validate
            _6b7(this);

            //init value
            _6d7(this);
        });
    };

    $.fn.combo.methods = {
        options : function(jq) {
            return $.data(jq[0], "combo").options;
        },
        panel : function(jq) {
            return $.data(jq[0], "combo").panel;
        },
        textbox : function(jq) {
            return $.data(jq[0], "combo").combo.find("input.combo-text");
        },
        destroy : function(jq) {
            return jq.each(function() {
                _6a4(this);
            });
        },
        resize : function(jq, _6dc) {
            return jq.each(function() {
                _698(this, _6dc);
            });
        },
        showPanel : function(jq) {
            return jq.each(function() {
                //set the combo panel position and position
                _6ae(this);
            });
        },
        hidePanel : function(jq) {
            return jq.each(function() {
                //----
                _6b4(this);
            });
        },
        disable : function(jq) {
            return jq.each(function() {
                _6ba(this, true);
                _6a7(this);
            });
        },
        enable : function(jq) {
            return jq.each(function() {
                _6ba(this, false);
                _6a7(this);
            });
        },
        validate : function(jq) {
            return jq.each(function() {
                _6b7(this, true);
            });
        },
        isValid : function(jq) {
            var _6dd = $.data(jq[0], "combo").combo.find("input.combo-text");
            return _6dd.validatebox("isValid");
        },
        clear : function(jq) {
            return jq.each(function() {
                _6be(this);
            });
        },
        getText : function(jq) {
            return _6c1(jq[0]);
        },
        setText : function(jq, text) {
            return jq.each(function() {
                _6c4(this, text);
            });
        },
        getValues : function(jq) {
            return _6c7(jq[0]);
        },
        setValues : function(jq, _6de) {
            return jq.each(function() {
                _6cb(this, _6de);
            });
        },
        getValue : function(jq) {
            return _6d1(jq[0]);
        },
        setValue : function(jq, _6df) {
            return jq.each(function() {
                _6d4(this, _6df);
            });
        }
    };
    $.fn.combo.parseOptions = function(_6e0) {
        var t = $(_6e0);
        return $.extend({}, $.fn.validatebox.parseOptions(_6e0), {
            width : (parseInt(_6e0.style.width) || undefined),
            panelWidth : (parseInt(t.attr("panelWidth")) || undefined),
            panelHeight : (t.attr("panelHeight") == "auto" ? "auto" : parseInt(t.attr("panelHeight")) || undefined),
            separator : (t.attr("separator") || undefined),
            multiple : (t.attr("multiple") ? (t.attr("multiple") == "true" || t.attr("multiple") == true || t.attr("multiple") == "multiple") : undefined),
            editable : (t.attr("editable") ? t.attr("editable") == "true" : undefined),
            disabled : (t.attr("disabled") ? true : undefined),
            hasDownArrow : (t.attr("hasDownArrow") ? t.attr("hasDownArrow") == "true" : undefined),
            value : (t.val() || undefined),
            delay : (t.attr("delay") ? parseInt(t.attr("delay")) : undefined),
            panelClose : (t.attr("panelClose") ? t.attr("panelClose") : true)
        });
    };

    $.fn.combo.defaults = $.extend({}, $.fn.validatebox.defaults, {
        width : "auto",
        panelWidth : null,
        panelHeight : 200,
        multiple : false,
        separator : ",",
        editable : true,
        disabled : false,
        hasDownArrow : true,
        value : "",
        delay : 200,
        panelClose : true,
        keyHandler : {
            up : function() {
            },
            down : function() {
            },
            enter : function() {
            },
            query : function(q) {
            }
        },
        onShowPanel : function() {
        },
        onHidePanel : function() {
        },
        onChange : function(_6e1, _6e2) {
        }
    });
})(jQuery);

//-------------------combo end-------------------
